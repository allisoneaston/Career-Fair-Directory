%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Unilever Logo.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Scott Chamberlain
%%CreationDate: 8/5/10
%%BoundingBox: 0 0 579 640
%%HiResBoundingBox: 0 0 578.5044 639.9971
%%CropBox: 0 0 578.5044 639.9971
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 116 128 8%%BeginData: 19298 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFF850D0E0D0E070E2F5A84FFFF7E2F5A2F5AFFFFFFAF305A2F%5AA9FFFFFFA9855A300D0E0D85FD15FF7E2FFFFFA9543007302F5A84FD05%FF845A305A2F303085FFFFFF5A0D0E2F5A84FD18FFA97E0D0D070D070D07%0D7EFF8430070D0754FFAF0D0D070D5AFFFFA90D0D070D070D075AA9FD11%FF075A84FF0D0D070D070D070D070D070D0DA9FFFF0D0D070D070D070D07%5AFF84070D0D0D07FD1CFF7E5A0D0D070E54FFFFFF840D070E0D0D070E0D%0D54FFFFFF070E0D0D07307EFD14FF7E070E2F0D070E0D0E5AAFFFFF7E30%0D0D07A9FFFFA87E0D0D070E0D0D07FF5A0D2F7E0D7EFD1DFF5A0D070D7E%FFFF7E2F0D070D070D070D070D070D53FFFF54070D075AFFA95A5A53FD12%FF0D070D070D070D54A95A5AA9FFFF5A070D07A9FD04FF5A0D070D072FFF%7E070D070D7EFD1BFFA92F0E0D30A9FFFF5A07302F30070E0D0E070E0D0E%070E0DA9FF5A0D0E2FFF2F0E070E5AFD11FF840E0D0E070E0D0E070E0DFD%04FF30070E54FD05FFA8300D0E5AFF840E070E0D5AFD1AFF5A070D070D0D%7E7EA9A9FFFFFF540D070D070D070D077E5A5A7EFFFF5A070D54AF2F0D07%AFFD10FFA92F070D070D5A0D070D07305A84FFFF5A0D070DFFFF5A5A0D0D%070D0784FF85070D070D0DFD19FF7E070E0D0D070E0D0D070E54FFA8300D%0D070E0D0D0730FD07FF300D0D5AFF7E7EFD10FFA9300D0D075A84FF5A5A%0D0D070E0D30A9FF0D0D07A97E0E070E0D0D070E5AFF2F0E0D0D070EFD19%FF845A535A2F302F0D070D075AFF300784FF0D075AA80D07A9FF30075AA8%FFA80D070D5AFD13FF7E0D070D2FFFFFFF2F0D070D075AFFFFFF0D070D7E%FFFF7E2F0D070D070D070D075A530D07A9FD1BFFA9FFFFFF0D0E075AFFFF%30A9FFFF540EA9FFA80E5AA9070E0D0E2F5A0D0E070E7EFD13FFA90E075A%FFFFFFA92F0E0730FD04FF0D0E077FFD05FF5A070E0D0E070E7EA9070E84%FD19FF5A070D2FFF2F0D0754FFFF84FD04FF5A07FFFFFF5A7EFF0D070D07%0D070D070D070D7EFD11FFA830070D54A9FFFF070D070D0730FFFFFF0D07%0D7EFFA8FD04FF2F070D070D0DFF5A0D07FD19FFAF0D0D2FFF5A0D075AA9%5A070EA9FFFFFF5A5AFFFFAF7EFFFF540D075A5A30070E0D0D0730FD10FF%AF30070E0D0D2F5A0D30070E0D0D075AFFA9070E0DA97E0E7EFFFFFF300D%070E0DA9A9300D30FD19FF5A0D5AFF5A0D070D2F0D070D07A9FF5A7EFFA9%FFFF7E0730A8A9070D5AFFFFA92F30070D07FD11FF5A2F070D070D070D07%0D07A9FFFFA8FF2F0D072FFFFF070D2F84530D070D2FFF7E2F070D5AFD1A%FF7EFF7E0E0D0E070E0D0E0730FF5A077EFF852FFF5A0E0730FF300730FF%A9A9FFFFFF84FD13FFA90E0D0E070E0D5A0D0E5AFFFFFFA90E070E7EFFA9%0E0D0E070E0D0E305A0D0E070E2FFD1CFF840D070D070D075A070D2FA907%0D54FF0D0D2F5A070D0730540D07855A0D7EFD16FF54070D070D070D54FF%7EA9FFFF5A0D070D0DFFFF5A070D070D070D070D070D070D2FFD1CFFA930%0D0D07305AFFFF300D302F0E0D5A7E0E0D0D070E0D0D070E0D0D2FFF0D0D%54FD15FF0D307E0E0D0D070E0D5A5A5A0D0D070E2FFF84300D0D070E0D0D%070E0D0D07307EFD1DFF54070D0754A8FFFFFF2F0D070D070D2F30070D07%0D07847E0D070D070DA8A9070D07A9FD12FF5A5AA9FF2F0DA87E070D070D%070D070D53FFFFA953302F30070D07302F5A5AA9FD1FFF5A305AAFA9A9A9%FFFF300D0E070E0D30070E2F0E070EFFFFA9300D0E075AFF5A070E0D7EFD%15FFA9A9FFFFFF7E5A2F5A5A85A9FD0FFFA9FFFFA9A9FD1EFF7E0D070D54%FF070D07547E0D070D07FF7E0D0DFFFFFFA830070D2FFFA92F070D07A9FD%12FFA95A2F302F7EFD09FF855AFD07FF84847E7E0D0D07A95A0DA8FD1DFF%300D0D070E845A075AFFFF070E0D30FFFFA885A8A984FFFF7E0D5AFFFFA8%0E070E84FD12FF300D0D070E0D300DFFFFA97E7E540E070E5AA95A305AFF%FF5A0D0D070E0D0D7E850D5AFD1AFF7E5AFF070D070D075AFFA9FFFFFF0D%070D54FFFFA92F0D070D075AFFFFA9FFFFFF840D07FD12FF7E070D070D07%0D070D7EFF070D070D070D070D070D070D5AFF840D070D070D54FF070D54%FD19FFA90D5AFF300D0E070E2FFD05FF2F0E0DA9FFFF0D0E070E0D0E077E%FD06FFA9FD13FF5A307EFF7E0E0D0E07FFFF30070E0D0E070E0D0E070E0D%30FFFF7E5A2F5AA9A92F0E0D85FD19FF2F0D0DFF7E0D070D0730FD05FF54%070DFFFF2F0D070D0785070D07FFFFFFA8A97EFD14FF7E84FFFF84070D07%2FA8FF2F0D070D5A540D0D070D070D0784FFFFFFA97E5A070D0730FD1AFF%5A070E5AFF7E300D0D2FFFFF85A9FF7E0D2FFFA95A5A0E0D5A5A0E0D0D7E%FF5A0D070E0DA9FD16FFAF30070E7E7EFFAF0D0D0730A8FFFFAF7E30070E%5AFF2F0E0D0D070E0D0E845AAFFD18FF7E0D070D2FA9FFA97EA9FF7E072F%A8FF54FD05FF070D845A075A075A2F0D070D070D07FD11FF7E2F5AFFFFFF%A92F2FFF07FFFF7E070D070D07302F0D070D075AFF0D070D070D0730A954%077EFD19FF7E5A2F5AA8FD05FF7E0E2FFD04FF5AFFFFFF300DFF2F7FFF0E%0D0E0D0E2F0E0D0EA8FD10FF5A0D0E0D5A7EFFFFFF5A0E84FFFF850D0E0D%0E070E0D0E0730A9FF7E5A2F3054A9FF5A070E5AFD1CFFA854070D070D0D%FF7EFF7EFFFFA907A9FFA9075AA80D84FF070D070D2F84070D0784FD10FF%2F0D070D07A9FFFF540D07FD04FFA92F0D070D070D0D5AA8FD06FF842F0D%070D075AFD1BFF5A300D0D075A0D0D7EFF7E0D2FFF5A0D2FFF300D5A850D%FF2F0E0DFF07857E0E5A0E84FD10FF0E070E0D0D07300D0D0730FD07FFAF%84A9FD08FF0D0E0D0D070E0D0D5AFD1AFF7E0D070D0730FF30070DA85A07%2FA87E070D070D0784070D070D07305A0DA85A2FFF07FD11FF2F0D070D07%0D070D070D7EFF0D54FFA954A9FFFFFFA97EA984FD04FF54070D070D070D%075AFD1AFF30075A0D0E07A9FF3007A9FF5AA9FFFF30070E0D0E0D0E0D30%7E850D300DFF0D5AFFA9FD11FF5A070E0D0E070E0D307EFF5A0E07A9840E%070E0D0E070E0D0E0D5AFFFFA90E0D0E070E0D0E5AFD19FFA9070DA85A07%0D0D7E070DFD06FF5A0D070D070D073084FFA80D070D7E0D0784A8FD11FF%7E0D2F85545A547EA9FFFFFF547EFFA9070D070D070D070D070D070D84FF%540D070D070D077EFD19FF5A0E0D5AA9300D0D070E7EFF7EFD05FFA95A2F%5A5AA9FD04FF540E0D0E070E0DA9FD12FFA8FFFFFFAF5AA9FFA95A2F85FF%FFFF0E0D0D07300D0D2F5A0D0D0730A8FF2F0E0D0D070E84FD19FF54070D%075A840D070D2FFF2F0D07A9FFFFFFA954A9FD04FF2F2F5AFF070D070D07%30FD17FF30072FFF2F070D07A9FFFF2F0D070D07FF0D30840D072F070DA8%FF070D070D07A9FD19FF0D0E0D0E070E0D0E5AFFA90E070E0DAFFFA90D0E%075AFFFFA80E0D0E7EFF5430075AFD15FF852FFF7E0E7EA90D0E070E5AFF%FF850D0E2FA9FFFFA9FF5A0EA9300D30FFFF540E070EFD1AFFA97E7E2F30%2F5AA884A85A070D070D2FFF2F0D070D0730A97E070D070DA8FD18FFA907%0D2FFFA8FFA80D070D077EFFFFFF30072F070D2FFFA8A9A9FF5A0D075AFF%FF5A0D2FFD1AFF30A9FD05FF5A0DAF2F0E0D0D070EFF30070E0D0D075A5A%0D07305AAF84A984AFFD15FF5A2FFF7E300D5A5A300D30A95A54FF7E0E0D%0D07A95A0E077EA9A95A0E0D7EFD1EFF5A0730535A847E070DFF54070D07%0D07FF5A84FF840D0D0730070D845A070D070D075AFD17FF0D070D077EFF%FFFF5A070D54FF2F0D070D070D070D5A0D070D070D073084FD1CFF840E07%0E5AFF5A0E0DA97E0E0D0E0730FD06FF300E0D0E2F300D0E070E0D0E07A9%FD12FF847E7EFF070E0D0E5AFF84FFA9302FFFFFFF5A0E070E0D0E0D0E0D%0E070E0D0E07307EFD1AFF54FFA88484FFFF7E070D2FFF2F0D070D5AFF2F%0D070D0730070D070D070D2F302F0D070D5AFD11FF7E0D070D5430070D07%A92F0D5AFFA8FD05FF7E30070D070D070D07307EFFFF7E070D84FD19FF30%2FFD04FFA9FF5A2F5AA9FF7E85A8FF2F0E0D0D070E0D0D070E0D305AAFFF%FFFF7E0DAFFD11FF7E0D0D0730AF5A5AA9AF30075AFFFF5AFFFFAF5AFFFF%FF7E857EA984FD04FF85AFA90730FD19FF2F0D07300D0D5AFD09FF7E0D07%0D53A9FF5A070D070D070D077EFFFFFF5AFD12FF5A0D070D53FF5AFFFFFF%A95AFFFF0D0D2FFFFF0D07FD09FFA92F07A9FF5A07A9FD18FFA9070E0D30%A8FD04FF5A84FD04FF5A075AFD04FF0D0E0DFF2F0E070E0DAFFD16FF7E30%5AFF5A0E2FFFFF7E5AFFA9300730FFFF070E5AA907305AFD04FF30070E84%FFA90E5AFD19FFA97EA9FFA907A9FF7E075AFD04FF2F54FFAF84FF7E0D07%7EFFFF070D070D7EFF2FFD18FF7E072FA80D070D07AF8430A8FF7E0D0730%FF5A070D07A9FF5A070D07AFFFFF075AFD1DFF540D5AFF2F0D5AFF7EA9FF%7EFF8507AFFF85070EFFFFFF5A0D0D07AFFF302FFD13FF2FFD04FF85AF7E%070E0D0D5AFD04FF7E0D0D07A9FF5A070E2FFF2F0E0D0DFFFFA80D5AFD1A%FF0D5AFF30077EA80D07A9A80D2FFFFF7E072FFFFF070D07A9FFFF530D07%30FFFF2F0D2FFD11FF7E0D2FA9FD04FF540D070D075A842F84FF530D070D%2FFFA92F070D7E0D070D0DFFFF5A07A9FD19FF7E0E5AFF0D0E847F0D30FF%5A0D5AFFA90D0E30FFFF30070E84FFFF7E0D5AA9FFA930070E84FD10FF5A%070E0D30A9FFFFAF0D0E0D0E84300D30FFA90D0E070E54FFA9300D5A5A0E%0D0E84FF0D30FD1AFF5A07847E0D07FF0D0D54FF070D5AFF070D075AFFFF%540D07A9FFFF54A9FFFF8430070D075AFD10FF2F0D070D070DFFFFFFA92F%5A7EFF843084FFFF5A070D070D2FFF840D07A9540D070D0D0D84FD1AFF2F%0E847E0730A90D07A97E0D07AF540D073030FFFFA90D0D7EFD05FF5A0E07%0E0D0D7EFD10FF300D0D070E0DA95A3030A9FD0AFF7E5A0D0E2FFF5A0E5A%FFA8300D0D5AFD1BFF0D077E2F0D075A070DA82F072FA80D07302F2FFFFF%5A0D0730FD04FF2F0D070D070D07FD11FF530D070D070DA80D070D072F53%FFFF5AFFFFA8FD05FF5A0D0DFF2F2FFFFFA80D2FFD1CFF070E0D0E070E0D%0E305A0D0E5A850D302F850DA9FF850D0E0DFFFFFF300E0D0E070E0DA9FD%12FF300E070E0DFF070E0D0E075AFFFF075A5A0E84A97EFFA9A9FF302FFF%0DA9FF5A0DFFA9A9FD19FF840D070D070D070D070D070D07FF2F0D540DA8%0D2FFFA830070DA8FFFF0D070D070D077EFD14FF5A0D070D5A0D070D2F84%FFFF5A0D070D07FF5A0D540D2FFF840D545A2FA9077E840D075AFD18FFA9%0D0D070E5A30070E0D0D075AFF302F7E0DFF2F0EA9FF7E0E0D5AFFFF2F0D%070E0D0DFD16FFAF5A070E0D5AA8FFFFFF2F0E0D0D0730FFA9070E0DA9FF%FF5A0D7E30543084300D0D2FFD18FF7E0D070D07FFA80D070D070DA8FF2F%307E0D5A84075AFFFF070D077EFFA9070D070D077EFD12FF842F2FFFFF2F%070DFFFF845AFFFF2F0D070D2FFF7E0D070D075AFFFF0D54070D2F0D070D%0730FD18FFA90D0E0730FFFF840E0D0E30FFFF302FFF0D5AFF5A0DA9FF5A%0D0E0DFFFFFF2F0E0D0E0785FD11FF5A070E2FA90D0E0D85FF7F0D30A9FF%8430075AFF85070E2F5A7EFFFF8507300D0E070E0D0E5AFD19FF0D070D07%7EFFFF0D0D07A9FFFF0730FF5A07FF7E0D0DFFA830070D5AFFFFFF7E3007%0D07A9FD10FF540D070D070D070D070D070D072F84FFA90D077E2F0D5AFD%06FF0D070D54842F0D07FD1AFF070E0D0D2FFFA90D075AFFFFFF0E2FFF7E%0E5AFF2F0E54FFA93054FFFF5A0D7EA9300D0D5AFD10FF7E0D0D07305A0D%075A5A30070E0D0E7EFF5A0D070E2FFFFFFF7E3054FF5A0D54FFFFA9077E%FD1AFF30070D077EFF30070DA8A9FF840730FFFF0730FFFF070D7EFFA8FF%FF7E070D070D070D075AFD10FF530D070D7E7E070DA8FF0D0D070D075AFF%5A070D070D070D070D07FFFFA907FD04FF30FD1BFF540E0D30FF850D0E30%FF0D300D0E54FFFF0E0DFFFF7F0D30A9FFFFFF2F0E0D0E070E0D0EA9FD10%FF5A0D307EFF2F0E077EFF5A2F7E7EFFFFA90D0E07307E5A070E0D30A9FF%FF85847E7EFD1DFFA9070D84A9070D07A9FF0D070D07A9A9FF070D84FFFF%300754FFFFFF0D070D070D070D54FFA8FD0EFF5A075AA8FFFF0D070D07FD%05FFA97E070D7E5A0DFFFF54070D070D7EFF5A0D070D2FFD20FF2F0D0730%FFFF7E302F858430300D07A9FFFF7E0E0DA9FFFF0D0D070E0D0D0DFF7E7E%FD14FF5A300D0DA8FFAF7E2F300D0D5AFFA80D7EFFFF3007AFA8FFFF300D%0D070E84FD1EFF5A0D070D53FD06FFA9070D070DFFA9FFFF070D2FFFFF0D%070D070D077EFF2F07FD0DFFA87E2F302F305AFFA8A9A9FFFFA92F0D070D%07FFFFFF070DA8FF840DFD04FF070D070D075AFD1EFF300D0E077FFD04FF%A9FFFF5A0D30A8FF0D5A7E0E0D30FFFF540E070E0D0EA9FF0D0E30FD0AFF%A92F0E0D0E070E0D0E845A2F85FD04FF540E0D5AFFFF840E073084FFA8FF%7E5A5A5A0D0E070E2FFD1DFF84070D070D2FFFFF5A070D0DFD05FF7E0D07%0D070D2FFFFFAF070D070D07FFFF0D070D075AA9FD06FF7E070D070D070D%077E7EFF840D072F84FFA90D2F0D54FFFF5A070D070D2FFF2F0D070D070D%070D070DFD1DFF540D5A5A0D0E84AF0D0D070E2F302F85FFFF070E0D0D07%85FFFFFF850D0D070E5AFF5A300D0D0730A8FD04FF7E070E0D0D070E0D0D%0785FFFF070E0D0EA9AF84FF2F85FFFF0D0E0D305AFFFF0E070E0D0D070E%0D0D0DFD1DFF2F07A9FF84545A7E0D070D070D070D07FFFF7E070D075AFF%FFFF84FFA9070D070D7EFFA830070D070DA9FFFF84070D070D070D070D07%0D53FF5A0D070D0754FFA9A8A9A8FF7E0D530D2FFFFFFF070D070D070D07%0D0730FD1DFF0D0EA9FFFFFF7E5A0D0E0D300D0E070E84FD09FF075AFFFF%7E5A0D3054FFFF30070E0D85FFFF0D0E070E0D0E07307EA9A8FFFF5A077E%7E0E07FF5A0E0DA9FFAFA9FFA930FFFFFF85070E0D0E070E0D0E5AFD1DFF%0D0784FFFFA80D070D07A9A80D070D07AFFFA97EA9A8FFFFFF5A0D07307E%FD06FF7E070D070D54FF5A0D070D070D070D84FD05FF070D0730070D7E7E%070D07A9FD04FFA9FD04FF842F0D070D070D07A9FD1DFF070E2FFFFF850D%0D070E2F5A070E0D85FF5A0D0D070E5AFFFF7E0D0D070E0D305A7E303007%0E2F0E077EFF30070E0D0D070E0D5A840E30A97E0E0D0D070E0DA92F0E0D%0D2FFFFFFF7E7E2F5A5AAFFFFF7E300D0D0730FD1EFF0D070D2FFF840D07%0D070D070D07A9FFFF070D070D070D2FFF7E0D070D070D070D070D070D5A%FF2F0D5AFF070D070D070D2F7EFFFF070D07FF070D070D070DA80D070D07%0DFFFF2F0D070D070D075AA9FFFF30070D84FD1EFF300E0D0E30FF7E300D%300D0E070EA9FFFF850D0E070E0D0E84FF0D0E070E0D0E070E0D0EFFFFA9%0E07FF840E070E0D5AA9FD04FF0E0D0E845A0D0E070E30FF0D0E0D0E2FFF%540E070E0D30A97E0D30FFFF7E0E7EFD1FFF84070D070D2FFFFFFF840D07%0D2FFD05FFA87E070D0730FF7E070D070D070D070D2FFFFF300730FFA907%0D075AFFFF7EFFFFFF2F0D2FFFFF5A2F3054FFFF7E070D0DA95A0D070D07%0D7EFFFF7E077EFFFF54FD21FF30070E0D0D5AFFFFFFA8A9A8FFA8855A85%A8FFFFFF2F0E0DFFFF5A0D0D070E0D0D07307E300730A8FF7E0E0D0D84FF%FF300DA9FFFF5AFD07FFA8FFFFFF84FF5A0D0730300D075AFFFFA90E2FFD%24FF840D070D070DFFFFFFA9FFFF530D070D070D2FA9FFFF2F0D7EFFFF5A%070D070D070D070D070D84FFFFA9070D07FF845A070D07305AA9FD04FF7E%5A075AFFFFFF842F0D072FA85A070D072F2F0D070DFD25FFA8300D0E07FF%FF5A2FFF5A0E070E2F30070E0DA9FFFF0D5AA9FFFF850D0E0D0E070E0D5A%A9FD04FF300D0EA97E0D0E070E0D0E070E0D0E070E0D0E84FF5430070E0D%30A9850D0E070E0D0E070E0DFD26FF8430072FFF5A075AA80D070D84FF84%A92F0D07A9FF0D070D070D54FF848554847EFFFF8407A9A8FF2F0D077EA8%30070D070D070D070D070D070D07FF540D070D0754A95A070D070D070D07%0D070DFD28FF7E7EAF070E5AA9070E5AFF5A0E0D5A5A0E2FFF2F0E0D3007%0E2FFD07FF5A0D0730A8AF070E0DFFA97E2F302F7EA885070E0D0D075AFF%FF070E0D5AA9300D0D070E0D0D2F5A0D0D2FFD2AFF5A0D075A7E0D075AFF%30070D075A070D845A070D84A9070D54FFFFFF5A5AA884070D077EFF5A07%0D0DA9FD06FF7E0D070D070DA8FFFF5A2FA9840D070D070D070D07FF2F0D%075AFD2AFF5A070E2FFF070E0DFFA95A2F300D7F0D5AA9300D305A5A0D30%FFFF2F0E070E0D0E070E5AFFA9300D0E0D7FFD06FF300E0D0E7EFD06FF30%070E0D0E070E0DA9A80E0D30A9FD2AFF540D070DA954070D0DA9FFFF2F0D%7E0D2FFF840D070D070D07FF7E0D070D070D0D54077EFFFFA830070D070D%2F5A5430070D070D54FD07FF0D0D070D070D075AA92F070D5AFD2BFF850D%0D077EA90E070E0D30070E0DA90730FFFFA97E2F302F85FF30070E0D0D07%30FD07FF7E0D0D070E0D0D070E0D307EA9300D070E0D3084FF2F0D070E0D%5AA9300D0D2FFD2CFFA80D070D07A9840D070D070D075A7E0D07FD08FF7E%070D070D070D2FFFFF7E5AFD05FF5A302F0D07302F7EFFFF070D070D070D%0730FFFF5A542F847E0D070D0DFD2EFF5A0E070E0D85A97F2F302F7EFF30%0730FFFFFFA95A7E7E5A0D0E070E0D0E075AFFFF2F0E2FA9FD0DFF0E0D0E%070E0D0E2FFD05FF2F0E070E0DA9FD2FFF0D0D070D07307EFFFFFF7E3007%0D2FFFFFFF5A0D070D070D070D070D070DA8FF7E0D070D07847E5A5A84A8%A92FFD05FF070D070D070D077EFFA9FFFF7E0D070D07A9FD30FFA90D0D07%0E0D0D070E0D0D070E0D7EFF855AFF2F0E0D0D070E0D0D0730A9FFA9300D%0D070E0D0D070E0D0D070E84FD04FFAF5A302F3054A98430075AFFFF5A0E%2FFD33FFA9070D070D070D070D070D0730FFFF530D2FFF532F070D070D2F%7EFFFF840D070D070D070D070D070D070D0730A9FFA87E7EFFFFFF847E2F%0D070D07A9FFFF7EFD36FF300E0D0E070E0D0E075AFFFFFF5A0D0E5AFFFF%AF84FD04FFA9540E070E0D0E070E0D0E075A0D0E070E0D7EA9300D0E070E%0D0E070E0D0E070E84FD3AFFA87E2F302F302F84FD04FF070D070DA8FD04%FFAF2F0D070D070D070D0D0D070D0754FF5A070D077EFF5A070D070D070D%072F5A30070D07AFFD44FFA90D0D070E0D7EFD04FF5A0E0D0D070E0D0D2F%FFA80E070E0D5A070E0D5AFFAF0D0D070E0D5A7EFFFFFF0D0E0D30FD41FF%2F302F0D070D070D070D075A84A9540D070D070D070D5AFF84FF540D070D%070D070D5AFF5A0D070D070D54FFFFFF5A0D070D84FD42FF2F0E070E0D0E%070E0D0E070E0D0E070E0D0E073084FF2F0E5AFF2F0E0D0E070E0DFFFF5A%0D0E070E0D85FFA9300E070E7EFD44FF540D070D070D070D070D070D070D%070D2F84FFA90D0D070DA8FF2F0D070D075AFFFF2F0D070D070D0D0D070D%070D7EFD46FFAF855A7E540E070E0D305AA984A9FFFF7E30070E0D0D0730%AFFF5A5A2F5AFFFFFF7E070E0D0D070E0D0D077EAFFD4CFFA930070D070D%07302F0D070D070D070D070D070D5AFD08FF5A070D070D07305AFD51FF7F%0D0E070E0D0E070E0D0E070E0D0E070E0D0E0D5A5A5A2F85FD04FFA9FD57%FFAF2F0D070D070D070D070D070D0D5A7E0D070D070D070D5AFD5EFFAF7E%54300D0D07302F5A7EFFFFFF7E5A2F302F7EA8FDFCFFFDFCFFFDFCFFFDFC%FFFD16FF7E302F5AA8FD64FF5A0E0DA9FD06FF7E0E0D0E075AFD3EFFA97E%FD0AFF7E2FA9FD16FF540D070D2FFD05FFA90D070D070D07A9FD3CFF5A0D%0D5AFD08FF7E0D0D0DFD16FF30070E0D30FD05FF7E0D0D070E0D0D2FFD3B%FF7E070D075AFD08FF070D070D7EFD15FF2F0D070D2FFD05FF070D073053%0D0730FD3BFF2F0E0D0E5AFD07FF840E0D0E077EFD15FF85070E0DAFFD04%FF840E0D0EA9FF2F0E2FFD3AFFA90D070D0784FD07FFA9070D070D54FD16%FFA97EFD06FF5A070D0DFFFF5A0730FD3AFF850D0D070EAFFD08FF0E070E%0D30FD1EFF2F0D075AFFFF5A0E2FFD3AFF2F0D070D07FD09FF2F0D070D2F%FD1EFF30070D53FFFF5A0730FD3AFF5A0D0E075AFD09FF85070E0D30FD1E%FF0D0E077EFFFF2F0E2FFD3AFF070D070D2FFD0AFF0D070D2FFD1EFF0D07%0D5AFFFF2F075AFD18FF845454FD18FF7E2F0D073054FF0D070E0D5AFD0A%FF2F0D0730FD0AFFA95A2FA9FD08FF84FD07FF070E0D5AFFFF0D0D5AFD05%FF5A302F7EFD07FF7E7EFD05FFA8300D0D7EFD04FFA95A5A7EFD07FFA8FD%05FFAF30070E0D0D070E5A070D070D54FD0AFF30070D2FFD04FFA9FD05FF%30070D2FFD07FF530D07FD06FF0D070D54FF7E0D0784FD04FF070D070D07%7EFD05FF7E072FFD05FF5A070D0784FFFFA930070D070D2FFD05FF0D0DFD%05FF30070D070D070D07300E070E0D5AFD0AFF2F0E077EFFFFFF7E0DA9FF%FFFF5A070E0D0EA9FD05FFA90E070E7EFD05FF070E0D5AFF5A0D30FD04FF%2F0E0D0E070E0DFD05FF070E0DA9FD04FF2F0E0D0E84FFFF30070E0D0E07%0E5AFFFFFF5A0E07FD04FF7E0D0E2FA9540E070E30070D070D54FD0AFF30%070D54FFFFA9070D54FFFF85070D070D077EFD05FF5A070D075AFD05FF2F%070D2FFF070D2FFFFFFF7E0D07300D0D070D7EFFFFFF5A0D070D5AFD04FF%30070D0784FF5A070D2F5A070D070DFFFFFF30070D7EFFFFA9070D0DFFFF%FF2F0D07A90E0D0D077EFD0AFF070E0D7EFFFF5A0D0730FFAF070E0D0D07%0E2FFD05FF2F0E0D0D5AFD05FF300D07305A0D07A9FFFFFF300D5AFFFF0D%0D077EFFFFFF300D0D0730FD04FF2F0D070EFFAF070E2FFFFF850D0D07FF%FFAF070E0D7EFFFF540D07AFFD07FF070D070D53FD09FF840D070D84FFFF%30070D07A90D0D070D070D070DA8FD04FF0D070D075AFD05FF5A070D070D%0730FFFFFFA9070D7EFFFF30070D5AFFFF84070D070D07FD04FF5A070D2F%FF5A0D077EFFFF7E0D070DFFFF540D070D54FFA80D075AFD08FF300D0E07%5AFD09FF85070E0DFFFFFF0D0E070E0D0E070E2F5A070E0D7EFD04FF070E%0D0EA8FD05FF840E070E0D0E84FFFFFF5A0E0DA9FFFF0D0E07FFFFFF2F0E%0D0E070E7EFFFFFF7E0E077FFF5A070E84FFFF5A0D0E2FFFFF30070E0D5A%FF7F0D30FD09FF2F0D070D07FD09FF2F0D075AFFFF7E0D070D070D070D5A%FFFF5A070D0DFFFFFF5A0D070D07A9FD06FF070D070D2FFD04FF5A070D5A%FF7E0D077EFFFF7E0D070D070D075AFFFFFF7E070DA8FF2F0D077EA83007%0D07A9FF5A070D070D07FF070D5AFD09FF7E070E0D0DA8FD07FFA80E0D0D%A8FFFF5A070E0D0D0730A8FFFFFFAF0E070E5AFFA9300D0D070E7EFD06FF%300D0D077EFD04FF2F0D07307E0E075AFFFFA9300D5A7E0E0D0D07FFFFFF%2F0E54FFFF300D0D070E0D0D2FFFFFA9070E840D070E0D0D07FD0AFFA90D%070D0754FD07FF54070D2FFFFFFF0D0D070D070D84FD05FF540D070D2F0D%070D070D072FA9FD04FF54070D070D07A9FFFFFF5A070D070D077EFFFFA9%2F0730FFFF070D070D5AFFA90D07A9FFFF2F0D070D077EA8FFFFA9070D2F%FF0D0D070D075AFD0BFF5A0E0D0E0785FD05FF85070E0DFFFFFFA90E070E%0D30A8FD07FF070E0D0E070E7EFF0D0E0D305AA95A30070E0D0E070E0DA9%FFFF540E070E0D3084FF7E300730FFFFFF5A0D0E07307E30075AFFFFFF5A%0D0E07307EFFFF850D0E2FFFFF5A070E0D0EA9FD0CFF2F0D070D075A7E84%7E30070D07A9FFFFFF7E070D0730A9FD08FF54070D070D2FFFFF5A070D07%0D070D070D0D7E0D0D070D070D070D070D070D070D070D072FA8FFFFFF84%0D070D070D072FA8FFFFFFA80D070D070D0D0D070D0DA9FFFF7E0D070D2F%FD0EFF540E0D0D070E0D0D070E0DA9FD04FF5A0E0D30A9FD09FFAF0E070E%2FFD04FF30070E0D0D070E5AFFFFFF2F0D070E0D0D0D5A0D0D070E0D0D07%5AAFFD05FF2F0E0D0D0730AFFD05FF5A0E0D0D070E0D0D2FFD05FF0D0D07%AFFD0FFF7E5A070D070D072F5AFD07FF2F5AFD0CFF84302FA9FD04FFA95A%2F302F5AA8FD05FF54302F305AFFFFA92F302F305AA9FD08FF53302F7EFD%08FF7E5A2F302F5A7EFD06FF7E2F7EFD0BFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 293 C)
%%CMYKCustomColor: 1 0.5700 0 0.0200 (PANTONE 293 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2010-08-05T16:17:37-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2010-08-05T16:17:37-04:00</xmp:ModifyDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:MetadataDate>2010-08-05T16:17:37-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>232</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUj85+U7XzVoUuk&#xA;XN1cWcUjK/q2r8G5LWgaoIZK9VOX6fOcU+IAH3tWfCMkeEkj3PnT8xfyOfydpb6suv209upAjgnU&#xA;29xIxIHGFQZRIwrU7jbOi0naXjS4eE38w6DVdneFHi4glX5Zaf8Amlq2oovlW9vLW3jcC4vDK62k&#xA;e9f3gNUfx4UJPhlusnghH94Afva9JHPM+gkD7Hvn5r3/AJRj8tPZeYPME2nXccZeNLGcx3E0nAha&#xA;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&#xA;yPV3+DEMcBEdE8yhudir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>24.000000</stDim:w>
            <stDim:h>18.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 293 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 293 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>57.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>2.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:74117FC920071168B628CF00FBC7371B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:74117FC920071168B628CF00FBC7371B</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:74117FC920071168B628CF00FBC7371B</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74117FC920071168B628CF00FBC7371B</stEvt:instanceID>
                  <stEvt:when>2010-08-05T16:17:37-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -639.997 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 639.997 li
578.504 639.997 li
578.504 0 li
cp
clp
[1 0 0 1 0 0 ]ct
223.694 529.797 mo
223.228 524.481 219.057 520.846 213.41 520.846 cv
207.108 520.846 201.177 527.456 201.805 535.766 cv
202.21 541.235 205.438 545.744 211.776 545.744 cv
219.057 545.744 224.362 537.445 223.694 529.797 cv
cp
false sop
/0 
<<
/Name (PANTONE 293 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .57 0 .02 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
456.698 586.254 mo
463.677 586.254 465.68 594.51 464.017 599.506 cv
462.347 604.479 456.384 610.138 447.089 611.799 cv
445.091 606.808 444.091 586.254 456.698 586.254 cv
cp
326.937 597.504 mo
326.937 591.877 323.938 587.229 320.31 587.229 cv
317.294 587.229 310.346 590.532 310.346 601.159 cv
310.346 609.484 313.305 613.436 314.659 615.124 cv
324.267 612.135 326.937 604.149 326.937 597.504 cv
cp
277.673 549.292 mo
277.099 540.019 274.854 535.827 269.867 536.164 cv
263.258 536.568 260.199 557.365 261.551 579.222 cv
262.41 593.482 264.536 595.679 266.516 595.546 cv
270.172 595.33 278.942 569.847 277.673 549.292 cv
cp
497.861 584.239 mo
493.748 601.305 481.277 626.404 462.667 626.404 cv
458.36 626.404 450.722 624.738 450.722 620.416 cv
450.722 615.769 479.949 615.124 479.949 592.869 cv
479.949 584.588 472.321 572.951 461.023 572.951 cv
446.088 572.951 431.523 589.23 431.523 611.799 cv
431.523 632.031 444.091 638.672 456.698 638.672 cv
478.619 638.672 491.891 620.733 498.853 605.803 cv
502.192 615.769 504.154 638.672 512.475 638.672 cv
515.791 638.672 518.125 637.01 522.119 628.059 cv
532.044 605.803 541.68 580.253 554.97 580.253 cv
559.936 580.253 556.959 589.23 568.905 589.23 cv
574.536 589.23 578.504 584.588 578.504 579.248 cv
578.504 571.61 571.546 565.658 560.933 565.658 cv
529.734 565.658 523.111 612.457 518.125 612.457 cv
509.82 612.457 512.475 574.944 506.496 574.944 cv
501.177 574.944 498.572 581.281 497.861 584.239 cv
cp
232.332 624.063 mo
237.303 624.063 245.858 622.449 252.591 611.672 cv
248.743 603.117 245.999 585.836 245.61 579.548 cv
243.628 547.367 256.028 517.1 269.597 516.267 cv
279.544 515.667 287.503 525.083 288.419 540.334 cv
290.865 580.434 277.514 597.173 270.83 611.605 cv
271.958 617.201 281.45 626.735 290.41 626.735 cv
293.723 626.735 297.727 625.077 298.725 623.732 cv
298.057 621.421 297.382 618.432 297.382 614.106 cv
297.382 590.872 312.328 571.279 325.268 571.279 cv
335.562 571.279 341.536 584.893 341.536 593.87 cv
341.536 604.479 332.567 613.127 319.3 621.421 cv
321.632 623.732 325.929 625.412 329.595 625.412 cv
348.525 625.412 358.437 602.5 365.771 581.58 cv
367.094 577.59 369.431 571.95 374.066 571.95 cv
382.038 571.95 385.367 624.397 398.61 624.397 cv
404.267 624.397 408.906 612.77 408.906 603.832 cv
408.906 597.187 406.582 596.521 406.582 586.894 cv
406.582 576.28 412.231 567.328 419.881 567.328 cv
424.525 567.328 426.197 571.95 426.197 577.59 cv
426.197 598.831 410.913 638.337 388.367 638.337 cv
371.412 638.337 372.734 609.127 366.767 609.127 cv
360.1 609.127 350.804 638.672 317.975 638.672 cv
312.636 638.672 307.009 636.022 302.375 630.699 cv
294.417 636.022 287.755 638.337 280.121 638.337 cv
267.855 638.337 262.537 625.726 257.563 625.726 cv
251.582 625.726 244.961 638.672 225.026 638.672 cv
209.094 638.672 206.436 617.444 200.808 617.444 cv
195.823 617.444 188.189 638.672 179.896 638.672 cv
165.937 638.672 162.971 601.834 150.674 601.834 cv
141.049 601.834 110.639 639.249 102.382 638.395 cv
99.0601 638.046 97.6655 635.567 98.0151 632.252 cv
98.4849 627.661 102.434 615.367 104.038 609.551 cv
106.724 599.457 109.187 588.389 110.563 584.861 cv
111.93 581.307 115.618 578.768 118.571 579.041 cv
120.064 579.182 120.512 581.96 120.976 584.253 cv
122.646 592.459 124.991 600.833 127.634 600.833 cv
132.294 600.833 147.695 571.279 156.649 571.279 cv
167.618 571.279 168.938 617.762 183.858 617.762 cv
188.851 617.762 192.511 611.799 195.823 604.479 cv
196.158 592.177 199.472 574.622 209.431 574.622 cv
216.407 574.622 219.733 590.206 214.734 603.832 cv
214.734 620.081 225.347 624.063 232.332 624.063 cv
cp
f
74.5093 562.681 mo
73.5581 559.664 70.7979 552.884 70.0439 547.872 cv
68.3818 536.784 74.1768 529.482 79.5044 527.804 cv
85.4771 526.138 87.811 529.136 90.1196 536.118 cv
93.1128 546.732 93.4409 560.657 92.439 580.575 cv
91.1294 607.801 77.5142 640.67 43.6655 639.986 cv
14.4448 639.347 1.51318 620.416 .168457 591.542 cv
-.462891 577.934 .503418 564.33 6.14697 545.081 cv
9.13525 534.785 11.8042 531.113 21.0806 529.136 cv
28.3779 527.804 27.7241 535.426 26.064 544.424 cv
22.4287 564.33 20.7427 573.942 22.0879 596.521 cv
23.3901 620.416 34.3677 629.716 46.3145 629.716 cv
64.2378 630.06 72.1948 615.124 75.5293 593.531 cv
78.168 576.28 76.1816 567.981 74.5093 562.681 cv
cp
f
463.529 103.551 mo
461.063 103.551 457.535 103.551 455.595 99.6855 cv
454.003 96.5107 454.537 91.3984 451.542 89.1099 cv
454.537 89.9883 457.707 89.9883 460.177 89.9883 cv
468.115 89.9883 475.699 84.5308 481.515 84.5308 cv
485.351 84.5308 486.585 87 486.585 89.458 cv
486.585 97.2168 470.936 103.551 463.529 103.551 cv
cp
467.4 123.454 mo
485.7 123.454 502.453 108.841 502.453 95.9834 cv
502.453 89.9883 499.625 85.061 492.402 84.1787 cv
493.637 85.7651 494.162 87 494.162 89.8135 cv
494.162 99.5068 479.398 110.251 463.351 110.251 cv
457.535 110.251 455.771 114.295 455.771 116.41 cv
455.771 121.346 460.534 123.454 467.4 123.454 cv
cp
465.994 130.857 mo
468.291 147.583 493.637 170.131 500.507 169.601 cv
505.098 169.211 506.857 147.76 506.857 130.857 cv
506.857 121.171 507.386 113.591 502.275 111.826 cv
494.162 128.215 472.873 131.56 465.994 130.857 cv
cp
f
69.5542 241.638 mo
75.5356 241.638 74.3022 204.998 83.9888 204.998 cv
86.2808 204.998 86.9863 207.291 86.9863 210.11 cv
86.9863 218.387 82.9307 230.542 82.9307 237.228 cv
82.9307 240.578 83.811 241.638 85.3979 241.638 cv
89.6313 241.638 97.0249 201.296 104.245 201.296 cv
106.537 201.296 107.59 203.589 107.59 205.881 cv
107.59 214.333 96.8511 238.64 96.8511 245.505 cv
96.8511 246.562 97.2017 247.442 98.083 247.442 cv
102.487 247.442 111.292 228.425 114.107 218.915 cv
115.692 213.979 117.808 211.336 119.747 211.336 cv
121.508 211.336 123.096 213.275 123.096 217.328 cv
123.096 226.838 114.282 249.208 106.537 264.183 cv
100.551 275.806 91.2173 292.528 91.2173 301.863 cv
91.2173 306.62 92.0894 311.548 98.9634 317.54 cv
87.6909 316.838 83.1094 315.779 78.8862 306.976 cv
60.0415 344.493 113.585 340.794 95.2603 374.071 cv
91.9126 368.094 65.498 361.927 65.498 327.051 cv
65.498 296.938 91.9126 279.322 91.9126 266.816 cv
91.9126 264.357 91.0415 262.242 88.7485 260.304 cv
82.9307 255.367 82.752 251.324 78.1821 251.324 cv
74.8325 251.324 70.7769 259.071 75.0063 265.936 cv
76.4189 268.226 77.6519 269.637 77.6519 271.753 cv
77.6519 276.679 69.897 289.884 64.4468 289.884 cv
58.9829 289.884 54.7622 276.337 54.7622 254.486 cv
54.7622 235.112 59.1582 215.567 64.6201 215.567 cv
66.2036 215.567 66.731 216.622 66.731 218.034 cv
66.731 220.325 66.0298 224.9 66.0298 232.645 cv
66.0298 240.93 67.9663 241.638 69.5542 241.638 cv
cp
f
114.458 293.236 mo
121.862 293.236 128.021 287.768 128.021 275.631 cv
128.021 257.66 li
128.021 250.794 128.55 243.049 133.133 237.581 cv
132.606 239.873 132.606 242.34 132.606 244.623 cv
132.606 259.772 141.059 270.168 141.059 284.783 cv
141.059 290.235 139.47 293.236 135.251 293.236 cv
131.195 293.236 131.548 289.534 130.666 289.534 cv
129.964 289.534 128.905 291.822 128.905 294.291 cv
128.905 297.991 131.548 303.8 138.943 303.8 cv
145.289 303.8 150.39 297.991 150.39 291.471 cv
150.39 275.631 138.06 258.013 138.06 241.107 cv
138.06 233.703 140 228.777 141.586 224.9 cv
141.586 259.951 171.349 285.487 171.349 300.101 cv
171.349 303.448 168.889 306.094 165.19 306.094 cv
161.137 306.094 159.194 302.919 159.194 300.45 cv
159.194 299.218 159.018 298.865 158.492 298.865 cv
157.445 298.865 154.269 302.391 154.269 306.976 cv
154.269 312.779 159.018 319.835 167.832 319.835 cv
177.863 319.835 183.321 311.372 183.321 303.8 cv
183.321 285.312 147.218 257.306 147.218 227.368 cv
147.218 222.255 148.098 213.979 151.8 207.644 cv
128.55 222.605 121.334 242.519 121.334 259.951 cv
121.334 275.103 120.805 282.665 113.056 282.665 cv
109.004 282.665 107.947 278.971 106.537 278.971 cv
105.479 278.971 104.946 282.139 104.946 283.018 cv
104.946 289.534 109.707 293.236 114.458 293.236 cv
cp
f
381.292 94.9248 mo
383.529 93.4268 393.455 95.8027 406.291 89.458 cv
407.875 88.5879 409.461 88.2324 410.868 88.2324 cv
417.042 88.2324 415.45 95.2754 421.099 95.2754 cv
425.5 95.2754 431.143 91.5728 434.5 91.5728 cv
439.747 91.5728 447.323 108.134 447.323 115.883 cv
447.323 124.864 433.79 130.326 417.748 130.326 cv
394.341 130.326 380.234 109.898 380.234 96.6855 cv
380.234 95.6279 380.768 95.2754 381.292 94.9248 cv
cp
419.687 117.293 mo
427.445 117.293 433.259 113.767 433.259 111.65 cv
433.259 110.956 432.202 110.426 429.909 110.426 cv
427.617 110.426 423.035 110.251 414.396 108.841 cv
406.988 107.605 401.353 104.787 399.236 104.787 cv
398.53 104.787 398.177 105.14 398.177 105.665 cv
398.177 110.251 406.639 117.293 419.687 117.293 cv
cp
f
118.159 359.632 mo
112.352 361.047 103.01 370.192 103.01 384.651 cv
103.01 401.904 121.508 428.506 151.976 428.506 cv
177.688 428.506 184.025 410.72 184.025 398.732 cv
184.025 372.136 167.656 353.465 146.347 353.465 cv
134.719 353.465 124.33 361.927 124.33 374.422 cv
124.33 386.057 133.133 403.49 154.093 403.49 cv
163.956 403.49 169.764 396.438 169.764 388.352 cv
169.764 380.419 162.545 369.507 151.976 369.507 cv
148.805 369.507 146.523 371.604 146.523 374.955 cv
146.523 379.18 152.331 383.415 159.549 383.415 cv
161.311 383.415 162.72 383.063 163.428 382.709 cv
163.778 383.24 163.956 384.12 163.956 384.823 cv
163.956 388.881 160.076 391.349 154.093 391.349 cv
145.113 391.349 136.475 384.651 136.475 374.071 cv
136.475 367.743 141.939 363.161 149.864 363.161 cv
165.54 363.161 174.869 377.069 174.869 390.995 cv
174.869 403.49 168.01 410.72 153.918 410.72 cv
125.73 410.72 112.001 385.355 118.159 359.632 cv
cp
f
319.203 462.825 mo
327.652 462.825 327.215 462.127 329.861 462.127 cv
332.5 462.127 332.68 463.708 332.68 464.769 cv
332.68 468.646 324.04 473.409 308.725 473.409 cv
299.74 473.409 294.278 468.646 292.692 463.359 cv
283.892 468.997 270.506 474.107 257.294 474.107 cv
221.195 474.107 212.035 458.42 200.762 453.328 cv
192.126 449.449 178.923 457.029 160.429 436.419 cv
162.897 436.947 166.246 437.124 168.889 437.124 cv
185.081 437.124 193.712 429.209 193.712 416.516 cv
193.712 414.929 193.535 413.187 193.36 411.605 cv
198.295 413.542 209.566 421.984 212.211 436.947 cv
212.565 438.712 219.78 440.297 224.356 440.297 cv
230.702 440.297 238.803 437.649 240.035 427.271 cv
261.172 425.512 275.443 413.01 278.438 397.143 cv
286.002 399.614 294.63 406.486 296.747 410.012 cv
299.74 408.958 303.257 408.429 307.312 408.429 cv
312.945 408.429 319.291 409.482 326.859 411.78 cv
327.215 409.482 327.566 406.662 331.092 406.662 cv
336.373 406.662 334.962 412.481 336.723 415.811 cv
337.607 417.572 342.021 418.633 342.021 422.156 cv
342.021 425.512 339.184 426.744 337.431 426.744 cv
336.723 426.744 335.843 426.567 335.31 426.394 cv
331.796 427.626 331.62 452.979 316.822 452.979 cv
305.904 452.979 295.865 443.996 291.458 432.734 cv
290.222 429.391 287.588 427.271 285.118 427.271 cv
282.306 427.271 280.722 427.8 277.381 431.507 cv
267.871 441.883 252.016 450.86 232.467 450.86 cv
226.474 450.86 221.722 450.333 220.488 450.333 cv
219.78 450.333 219.78 450.508 219.78 450.682 cv
219.78 451.917 225.765 456.68 238.803 456.68 cv
269.799 456.68 277.381 439.238 282.306 439.238 cv
283.012 439.238 285.118 439.238 286.352 442.059 cv
293.572 458.95 309.339 462.825 319.203 462.825 cv
cp
305.55 427.626 mo
305.55 431.507 308.725 434.673 312.593 434.673 cv
316.47 434.673 319.641 431.507 319.641 427.626 cv
319.641 423.745 316.47 420.573 312.593 420.573 cv
308.725 420.573 305.55 423.745 305.55 427.626 cv
cp
f
445.03 339.73 mo
442.565 339.73 439.923 341.674 439.923 346.434 cv
439.923 351.703 443.975 355.055 446.264 356.108 cv
447.5 356.813 449.44 357.521 451.362 357.521 cv
456.477 357.521 460.534 356.108 460.534 351.875 cv
460.534 346.434 452.601 339.73 445.03 339.73 cv
cp
426.033 350.646 mo
422.333 350.646 401.876 377.947 388.697 377.947 cv
385.526 377.947 382.885 371.957 382.885 367.395 cv
382.885 364.926 384.463 363.161 390.113 361.927 cv
420.392 355.055 413.695 332.327 439.566 332.327 cv
453.832 332.327 469.697 342.023 469.697 363.863 cv
469.697 387.119 436.607 415.991 431.672 415.991 cv
427.617 415.991 423.21 410.186 423.21 406.31 cv
423.21 405.082 423.74 403.49 427.267 402.085 cv
444.147 395.381 453.832 379.887 453.832 371.957 cv
453.832 370.192 452.953 368.451 450.662 368.451 cv
447.675 368.451 434.848 397.676 420.57 397.676 cv
410.691 397.676 400.646 388.707 400.646 384.474 cv
400.646 377.423 429.203 364.395 429.203 354.521 cv
429.203 350.817 427.445 350.646 426.033 350.646 cv
cp
f
77.4771 119.762 mo
77.4771 119.762 72.3662 123.628 66.0298 123.628 cv
58.4663 123.628 52.4702 117.996 52.4702 110.073 cv
52.4702 104.611 55.2891 98.9785 61.8032 96.1582 cv
61.6265 97.2168 61.6265 98.0938 61.6265 99.1533 cv
61.6265 109.192 67.2622 116.762 77.4771 119.762 cv
cp
115.165 153.577 mo
111.292 158.152 107.238 165.906 107.238 173.826 cv
107.238 183.335 113.056 191.258 122.039 191.258 cv
130.666 191.258 134.719 183.863 134.719 176.295 cv
134.719 164.498 123.977 156.211 115.165 153.577 cv
cp
56.6997 160.619 mo
56.3716 161.162 56.1733 161.854 56.1733 162.561 cv
56.1733 164.146 57.936 165.906 59.5112 165.906 cv
60.9243 165.906 61.8032 165.555 62.5098 165.555 cv
66.731 165.555 71.4839 168.544 78.3589 168.544 cv
82.4028 168.544 87.1626 167.307 93.1479 164.323 cv
105.828 157.978 110.767 142.307 110.767 139.66 cv
110.767 136.312 108.075 136.748 105.828 133.667 cv
103.583 130.599 104.441 127.881 103.01 126.447 cv
102.194 125.622 99.6694 125.568 96.4937 125.215 cv
95.4321 125.1 94.0264 125.039 92.6177 125.039 cv
86.811 125.039 79.9224 125.753 72.189 130.681 cv
56.9106 140.428 59.1582 156.566 56.6997 160.619 cv
cp
98.083 138.779 mo
99.3008 140.438 102.665 142.481 102.665 143.716 cv
102.665 146.173 101.254 149.35 98.4351 149.35 cv
92.2671 149.35 87.3394 140.014 87.3394 134.725 cv
87.3394 131.385 89.2778 131.033 91.9126 131.033 cv
93.1479 131.033 93.6733 131.21 94.5581 131.74 cv
96.1431 132.618 96.1431 136.136 98.083 138.779 cv
cp
81.8735 160.27 mo
76.0669 160.27 69.728 153.051 69.728 146.528 cv
69.728 143.012 72.3662 138.603 74.3022 138.603 cv
75.0063 138.603 75.3604 139.134 75.5356 140.368 cv
76.5942 148.996 82.2275 153.932 87.5156 156.391 cv
88.0459 156.741 88.3965 156.919 88.3965 157.27 cv
88.3965 158.503 85.0464 160.27 81.8735 160.27 cv
cp
96.8511 115.883 mo
97.73 113.06 98.4351 109.547 98.4351 105.665 cv
98.4351 97.2168 94.5581 84.3564 82.5796 84.3564 cv
75.7158 84.3564 70.7769 89.8135 70.7769 96.334 cv
70.7769 110.251 84.6943 115.883 96.8511 115.883 cv
cp
51.2378 186.331 mo
51.2378 199.712 55.2891 206.057 62.5098 206.057 cv
68.1421 206.057 75.7158 202.003 84.6943 194.255 cv
77.8267 195.843 72.5405 196.897 67.7891 196.897 cv
61.4512 196.897 56.5244 194.432 51.2378 186.331 cv
cp
57.4058 170.657 mo
57.2324 171.54 57.2324 172.418 57.2324 173.296 cv
57.2324 181.572 61.6265 186.155 67.4385 186.155 cv
71.8325 186.155 76.9497 183.511 81.522 177.696 cv
79.5913 178.046 77.3008 178.221 75.1851 178.221 cv
68.6724 178.221 61.6265 176.469 57.4058 170.657 cv
cp
100.551 168.189 mo
96.4937 169.247 88.0459 174.177 88.0459 182.982 cv
88.0459 189.318 92.9702 193.374 99.1411 193.374 cv
102.314 193.374 104.598 192.669 106.005 191.611 cv
101.079 186.86 99.3179 181.572 99.3179 176.295 cv
99.3179 172.591 99.8452 170.305 100.551 168.189 cv
cp
106.888 119.936 mo
106.888 123.805 110.059 126.979 113.929 126.979 cv
117.808 126.979 120.978 123.805 120.978 119.936 cv
120.978 116.06 117.808 112.885 113.929 112.885 cv
110.059 112.885 106.888 116.06 106.888 119.936 cv
cp
116.044 135.782 mo
116.044 139.66 119.218 142.836 123.096 142.836 cv
126.964 142.836 130.138 139.66 130.138 135.782 cv
130.138 131.915 126.964 128.74 123.096 128.74 cv
119.218 128.74 116.044 131.915 116.044 135.782 cv
cp
f
390.813 222.255 mo
390.813 218.737 393.988 215.742 397.472 215.742 cv
401.353 215.742 404.351 218.737 404.351 222.255 cv
404.351 226.308 401.353 229.131 397.472 229.131 cv
393.988 229.131 390.813 226.308 390.813 222.255 cv
cp
328.978 168.016 mo
328.978 171.886 332.152 175.06 336.018 175.06 cv
339.904 175.06 343.075 171.886 343.075 168.016 cv
343.075 164.146 339.904 160.972 336.018 160.972 cv
332.152 160.972 328.978 164.146 328.978 168.016 cv
cp
322.996 192.843 mo
322.996 198.311 327.566 202.88 333.032 202.88 cv
338.489 202.88 343.075 198.311 343.075 192.843 cv
343.075 187.391 338.489 182.806 333.032 182.806 cv
327.566 182.806 322.996 187.391 322.996 192.843 cv
cp
345.191 181.572 mo
345.191 187.567 349.954 192.315 355.907 192.315 cv
361.9 192.315 366.667 187.567 366.667 181.572 cv
366.667 175.588 361.9 170.834 355.907 170.834 cv
349.954 170.834 345.191 175.588 345.191 181.572 cv
cp
346.078 158.68 mo
346.078 162.383 349.072 165.381 352.736 165.381 cv
356.44 165.381 359.434 162.383 359.434 158.68 cv
359.434 154.986 356.44 151.992 352.736 151.992 cv
349.072 151.992 346.078 154.986 346.078 158.68 cv
cp
377.946 141.776 mo
377.946 145.469 380.941 148.465 384.644 148.465 cv
388.344 148.465 391.347 145.469 391.347 141.776 cv
391.347 138.075 388.344 135.077 384.644 135.077 cv
380.941 135.077 377.946 138.075 377.946 141.776 cv
cp
364.725 163.44 mo
364.725 169.601 369.837 174.705 376.005 174.705 cv
382.175 174.705 387.285 169.601 387.285 163.44 cv
387.285 157.27 382.175 152.168 376.005 152.168 cv
369.837 152.168 364.725 157.27 364.725 163.44 cv
cp
346.602 204.646 mo
346.602 208.524 349.777 211.687 353.614 211.687 cv
357.494 211.687 360.668 208.524 360.668 204.646 cv
360.668 200.771 357.494 197.604 353.614 197.604 cv
349.777 197.604 346.602 200.771 346.602 204.646 cv
cp
369.661 190.555 mo
369.661 194.432 372.831 197.604 376.71 197.604 cv
380.587 197.604 383.757 194.432 383.757 190.555 cv
383.757 186.684 380.587 183.511 376.71 183.511 cv
372.831 183.511 369.661 186.684 369.661 190.555 cv
cp
363.143 215.387 mo
363.143 222.077 368.602 227.543 375.304 227.543 cv
381.999 227.543 387.466 222.077 387.466 215.387 cv
387.466 208.701 381.999 203.236 375.304 203.236 cv
368.602 203.236 363.143 208.701 363.143 215.387 cv
cp
388.521 200.413 mo
388.521 204.998 392.225 208.701 396.771 208.701 cv
401.353 208.701 405.056 204.998 405.056 200.413 cv
405.056 195.843 401.353 192.142 396.771 192.142 cv
392.225 192.142 388.521 195.843 388.521 200.413 cv
cp
387.992 178.221 mo
387.992 182.279 391.347 185.627 395.355 185.627 cv
399.412 185.627 402.763 182.279 402.763 178.221 cv
402.763 174.177 399.412 170.834 395.355 170.834 cv
391.347 170.834 387.992 174.177 387.992 178.221 cv
cp
f
405.934 409.311 mo
401.353 412.839 390.636 420.747 372.831 420.747 cv
363.315 420.747 359.082 417.753 357.67 417.753 cv
355.907 417.753 353.966 419.515 352.031 421.808 cv
347.841 426.744 342.378 435.907 342.378 445.935 cv
342.378 452.979 347.841 460.009 358.023 460.009 cv
390.989 460.009 415.63 439.411 415.63 422.691 cv
415.63 413.187 409.996 409.311 405.934 409.311 cv
cp
396.771 407.368 mo
398.199 406.16 398.53 404.199 398.53 402.257 cv
398.53 398.203 li
398.53 393.095 390.813 390.113 380.234 390.113 cv
367.367 390.113 360.492 395.909 360.492 398.381 cv
360.492 406.486 li
360.492 409.838 368.253 413.187 377.769 413.187 cv
385.35 413.187 392.225 411.248 396.771 407.368 cv
cp
395.355 424.804 mo
396.242 424.804 397.294 425.329 397.294 428.506 cv
397.294 432.382 395.537 437.479 389.23 441.529 cv
384.816 444.525 378.828 446.995 370.013 447.153 cv
371.419 442.94 372.478 438.533 372.478 434.324 cv
372.478 432.911 372.306 431.853 372.129 430.27 cv
374.422 430.27 li
388.344 430.27 394.341 424.804 395.355 424.804 cv
cp
f
328.093 209.584 mo
330.035 224.548 350.13 216.977 350.13 235.112 cv
350.13 237.759 349.425 241.638 349.425 244.976 cv
349.425 248.856 349.777 252.203 352.736 252.203 cv
355.73 252.203 356.44 250.093 356.44 247.269 cv
356.44 244.446 355.73 240.93 355.73 238.994 cv
355.73 232.822 360.14 231.421 362.786 231.421 cv
369.484 231.421 374.595 238.288 384.644 238.288 cv
382.35 249.558 359.082 246.562 359.082 258.896 cv
359.082 265.066 365.25 266.465 369.307 266.465 cv
373.011 266.465 374.246 265.936 374.246 262.772 cv
374.246 261.007 373.889 259.071 373.889 257.837 cv
373.889 257.129 374.422 256.425 375.304 256.425 cv
379.185 256.425 398.177 270.869 398.177 275.278 cv
398.177 279.322 378.122 283.373 372.306 283.373 cv
370.542 283.373 370.189 282.139 370.189 281.439 cv
370.189 280.206 373.184 276.504 373.184 274.395 cv
373.184 272.81 370.542 271.753 363.487 271.753 cv
360.14 271.753 357.67 272.104 357.67 274.753 cv
357.67 279.497 365.432 285.312 365.432 289.711 cv
365.432 293.236 363.315 295.35 357.67 295.35 cv
352.913 295.35 345.72 291.645 345.72 285.487 cv
345.72 280.556 350.8 275.631 350.8 272.634 cv
350.8 271.753 350.13 270.344 348.013 270.344 cv
341.492 270.344 339.728 287.594 316.646 289.534 cv
320.347 286.192 323.515 282.491 323.515 274.927 cv
323.515 271.227 322.64 268.226 322.64 264.183 cv
322.64 258.896 325.1 256.248 328.624 256.248 cv
335.136 256.248 338.309 265.405 342.55 265.405 cv
344.847 265.405 347.308 263.3 347.308 260.129 cv
347.308 246.741 321.582 248.678 321.582 229.834 cv
321.582 224.724 323.334 218.387 328.093 209.584 cv
cp
412.103 261.187 mo
412.103 265.583 413.518 270.692 417.923 270.692 cv
421.624 270.692 424.797 265.066 424.797 258.896 cv
424.797 251.851 423.563 246.388 423.563 243.565 cv
423.563 242.34 424.092 241.813 424.797 241.813 cv
427.445 241.989 429.909 249.208 432.731 249.208 cv
435.906 249.208 440.628 243.39 442.565 243.39 cv
443.093 243.39 443.266 244.095 443.266 244.27 cv
443.266 246.916 439.213 252.734 439.213 255.018 cv
439.213 256.953 449.44 257.305 449.44 259.071 cv
449.44 261.714 438.724 261.714 433.613 264.005 cv
428.679 266.113 425.675 268.757 425.675 272.282 cv
425.675 275.806 429.203 276.504 434.142 276.504 cv
445.917 276.504 454.188 270.168 456.83 270.168 cv
457.359 270.168 457.707 270.519 457.707 271.049 cv
457.707 272.81 451.719 278.62 451.719 281.263 cv
451.719 284.254 462.65 287.768 462.474 289.534 cv
462.298 290.061 461.587 290.235 460.358 290.235 cv
458.413 290.235 455.423 289.711 453.125 289.711 cv
451.719 289.711 450.484 289.884 449.951 290.587 cv
448.734 292.001 450.308 301.333 447.852 301.333 cv
445.559 301.333 439.566 280.556 426.033 280.556 cv
424.092 280.556 422.686 282.139 422.686 284.783 cv
422.686 291.822 429.561 299.922 436.083 303.8 cv
439.037 305.739 443.975 307.678 443.975 308.738 cv
443.975 310.843 432.731 308.912 432.731 312.43 cv
432.731 315.604 434.142 320.366 434.142 323.174 cv
434.142 324.057 433.966 325.11 432.908 325.11 cv
430.796 325.11 425.675 315.43 423.21 315.43 cv
421.099 315.43 416.517 321.232 414.568 321.232 cv
414.047 321.232 413.695 320.707 413.695 320.187 cv
413.695 316.133 420.216 306.976 420.216 297.991 cv
420.216 293.762 419.687 284.606 414.568 284.606 cv
410.343 284.606 405.581 291.296 403.464 297.991 cv
402.234 301.863 403.116 316.838 400.293 316.838 cv
397.648 316.838 398.353 306.798 394.826 306.798 cv
392.225 306.798 386.583 311.548 384.644 311.548 cv
384.292 311.548 383.939 311.372 383.939 311.02 cv
383.939 308.912 389.049 302.038 389.049 300.631 cv
389.049 297.991 377.417 297.643 377.417 295.525 cv
377.417 294.291 381.999 293.412 386.227 292.704 cv
395.183 291.118 408.404 284.606 408.404 275.454 cv
408.404 265.24 398.53 260.83 392.047 256.602 cv
388.697 254.486 384.997 252.734 384.997 251.324 cv
384.997 249.911 389.23 249.911 390.989 249.911 cv
393.63 249.911 396.242 249.735 396.242 247.623 cv
396.242 246.032 395.884 242.871 395.884 240.404 cv
395.884 238.64 396.061 237.228 396.771 237.228 cv
399.412 237.228 403.116 245.859 404.88 245.859 cv
407.697 245.859 411.574 238.815 414.224 238.815 cv
415.097 238.815 415.45 239.346 415.45 240.93 cv
415.45 247.442 412.103 254.837 412.103 261.187 cv
cp
f
333.205 309.961 mo
341.316 311.02 343.259 313.838 343.259 316.133 cv
343.259 320.009 339.728 321.232 336.373 321.232 cv
333.912 321.232 331.092 320.707 328.093 320.707 cv
324.216 320.707 320.347 321.589 317.175 325.29 cv
319.464 325.64 322.814 327.227 322.814 330.754 cv
322.814 340.968 294.453 332.505 294.453 358.756 cv
294.453 372.664 308.9 387.82 330.736 387.82 cv
342.021 387.82 349.249 384.12 349.249 379.887 cv
349.249 376.543 343.259 378.831 343.259 376.012 cv
343.259 374.778 345.368 372.481 345.368 370.541 cv
345.368 369.686 344.667 368.094 343.259 368.094 cv
340.08 368.094 334.087 373.189 321.932 373.189 cv
312.417 373.189 303.083 367.743 303.083 360.34 cv
303.083 358.756 303.789 357.87 304.842 357.87 cv
305.904 357.87 307.312 358.58 308.545 358.58 cv
309.605 358.58 309.78 357.87 309.78 355.935 cv
309.78 353.994 309.78 348.528 313.119 348.528 cv
316.47 348.528 322.814 360.867 347.136 360.867 cv
355.205 360.867 370.895 359.283 376.71 353.994 cv
376.535 373.367 361.375 398.904 329.682 398.904 cv
296.747 398.904 279.134 372.481 279.134 348.176 cv
279.134 321.232 301.141 296.761 331.269 296.761 cv
339.015 296.761 345.543 299.396 345.543 302.742 cv
345.543 307.329 334.087 304.508 333.205 309.961 cv
cp
387.285 319.307 mo
388.521 321.232 389.049 323.174 389.049 324.935 cv
389.049 329.871 385.702 334.445 385.702 339.557 cv
385.702 345.373 390.113 350.115 396.771 350.115 cv
403.998 350.115 408.937 344.317 408.937 337.44 cv
408.937 328.109 400.475 320.187 387.285 319.307 cv
cp
328.978 330.578 mo
330.736 332.327 331.269 334.093 331.269 335.858 cv
331.269 338.501 330.035 341.321 330.035 344.317 cv
330.035 348.528 333.205 352.232 337.78 352.232 cv
342.726 352.232 346.078 348.352 346.078 343.79 cv
346.078 337.092 339.184 330.578 328.978 330.578 cv
cp
352.388 300.631 mo
370.895 304.152 380.941 318.071 380.941 331.103 cv
380.941 340.09 375.304 348.352 365.432 348.352 cv
356.44 348.352 349.954 342.2 349.954 332.327 cv
349.954 324.935 355.73 317.188 355.73 309.609 cv
355.73 306.62 354.853 303.625 352.388 300.631 cv
cp
361.55 324.057 mo
361.55 326.521 363.315 328.461 365.784 328.461 cv
368.602 328.461 370.371 325.994 370.371 323.174 cv
370.371 319.482 367.019 314.369 363.843 314.369 cv
362.429 314.369 362.962 316.484 362.605 318.775 cv
362.429 320.53 361.55 322.644 361.55 324.057 cv
cp
f
167.129 142.836 mo
173.113 142.836 179.972 110.426 179.972 104.962 cv
179.972 103.551 179.453 102.494 178.219 102.494 cv
172.76 102.494 165.19 133.316 165.19 140.189 cv
165.19 141.423 165.54 142.836 167.129 142.836 cv
cp
210.275 152.52 mo
214.671 152.52 219.605 135.607 219.605 125.039 cv
219.605 122.745 219.254 120.288 218.195 120.288 cv
214.495 120.288 208.333 137.722 208.333 147.23 cv
208.333 150.933 209.216 152.52 210.275 152.52 cv
cp
181.555 136.842 mo
183.496 136.842 185.965 134.725 190.549 129.623 cv
190.9 127.333 190.9 125.215 190.9 122.571 cv
190.9 119.055 189.491 115.179 187.376 115.179 cv
182.087 115.179 179.453 129.271 179.453 132.974 cv
179.453 135.077 180.502 136.842 181.555 136.842 cv
cp
205.689 129.623 mo
205.689 126.625 204.983 125.921 204.279 125.921 cv
202.517 125.921 200.586 128.038 197.766 132.795 cv
198.121 139.134 199.18 141.953 200.938 141.953 cv
202.87 141.953 205.689 135.782 205.689 129.623 cv
cp
219.254 108.841 mo
230.877 108.841 236.159 118.878 236.159 130.15 cv
236.159 135.077 234.758 142.307 232.467 142.307 cv
230.174 142.307 230.528 138.253 230.174 134.549 cv
229.824 129.798 228.941 128.74 227.354 128.74 cv
224.356 128.74 222.428 135.782 222.428 142.307 cv
222.428 146.35 223.131 150.933 226.296 150.933 cv
228.057 150.933 229.645 150.05 230.702 148.996 cv
229.998 157.093 224.004 164.146 215.553 164.146 cv
200.056 164.146 194.242 145.999 192.479 135.434 cv
183.146 145.294 174.523 152.52 159.018 152.52 cv
144.583 152.52 138.06 141.953 138.06 131.915 cv
138.06 128.916 139.12 121.171 142.821 121.171 cv
147.218 121.171 143.349 135.607 151.976 135.607 cv
154.093 135.607 157.962 133.842 160.076 128.038 cv
161.311 124.512 162.017 120.818 162.017 117.645 cv
162.017 112.885 160.959 109.898 157.445 109.898 cv
154.443 109.898 150.742 112.18 149.508 113.415 cv
153.741 100.731 163.956 94.2188 175.22 94.2188 cv
189.141 94.2188 196.532 106.549 196.532 120.288 cv
196.532 122.221 196.353 124.335 196.003 126.273 cv
201.988 116.41 210.275 108.841 219.254 108.841 cv
cp
f
186.315 156.211 mo
178.745 156.211 178.395 165.381 178.395 183.863 cv
172.76 171.715 163.428 158.68 152.507 158.68 cv
145.113 158.68 142.293 163.615 142.293 172.237 cv
142.293 174.002 142.468 176.647 142.821 178.221 cv
143.702 175.236 146.523 174.002 150.04 174.002 cv
157.619 174.002 166.774 179.81 172.76 187.742 cv
165.894 186.51 159.194 185.273 153.566 185.273 cv
150.04 185.273 146.87 185.627 144.23 186.86 cv
139.12 189.142 132.25 196.721 132.25 208.173 cv
132.25 209.935 132.43 211.865 132.782 213.979 cv
138.943 200.239 155.324 194.078 165.894 194.078 cv
168.01 194.078 169.589 194.255 170.821 194.432 cv
165.365 199.355 164.131 207.993 163.778 213.804 cv
163.604 216.622 162.545 216.802 160.605 216.802 cv
160.605 222.605 165.19 231.244 165.19 235.643 cv
165.19 237.228 164.307 238.64 163.428 238.994 cv
163.428 246.741 171.173 252.379 171.173 257.306 cv
171.173 258.538 170.821 259.597 170.292 260.129 cv
170.821 263.3 179.344 268.634 180.445 271.304 cv
181.798 274.555 183.321 275.103 184.205 275.103 cv
187.198 275.103 191.95 271.575 191.95 268.401 cv
191.95 267.347 191.068 266.113 190.373 265.583 cv
187.024 263.125 185.258 257.837 183.85 254.318 cv
182.614 254.318 181.018 253.798 180.464 251.724 cv
179.497 248.078 179.453 241.282 178.042 237.228 cv
175.751 236.703 174.692 235.82 174.692 231.07 cv
174.692 228.777 176.104 219.795 176.104 216.622 cv
175.046 216.622 173.643 215.919 173.643 213.804 cv
173.643 208.173 179.278 203.765 180.854 196.547 cv
190.9 203.939 193.36 211.51 193.36 218.212 cv
193.36 221.726 192.831 225.076 192.126 228.251 cv
199.529 224.548 210.626 219.091 210.626 207.993 cv
210.626 201.472 207.631 194.255 187.728 191.433 cv
193.886 189.142 201.645 187.917 208.158 187.917 cv
219.429 187.917 225.943 191.433 227.354 199.355 cv
229.645 195.843 231.408 191.785 231.408 188.092 cv
231.408 179.455 224.181 173.826 215.025 173.826 cv
204.279 173.826 194.77 179.455 184.556 186.331 cv
189.141 176.821 192.301 171.188 197.945 171.188 cv
198.823 171.188 199.707 171.366 200.586 171.54 cv
198.47 163.794 190.549 156.211 186.315 156.211 cv
cp
f
483.063 283.192 mo
491.874 283.192 498.923 294.643 498.923 308.032 cv
498.923 322.29 492.226 337.793 480.28 348.352 cv
480.104 324.583 451.009 332.155 451.009 314.897 cv
451.009 307.503 456.3 302.565 462.65 302.565 cv
468.291 302.565 472.695 304.152 475.871 307.329 cv
472.695 304.332 471.108 300.101 471.108 296.055 cv
471.108 289.354 475.341 283.192 483.063 283.192 cv
cp
f
325.8 115.883 mo
330.386 120.288 334.429 122.221 339.367 122.221 cv
341.316 122.221 343.608 121.698 344.847 121.698 cv
346.426 121.698 347.484 122.396 347.484 123.628 cv
347.484 125.568 345.72 128.74 343.608 130.505 cv
345.72 131.385 348.013 131.74 350.483 131.74 cv
360.492 131.74 371.949 125.391 371.949 109.547 cv
374.066 112.356 375.304 118.176 375.304 120.818 cv
375.304 140.014 361.199 147.408 348.195 147.408 cv
339.728 147.408 335.492 144.589 334.429 144.589 cv
331.092 144.589 331.269 151.286 328.978 151.11 cv
324.921 150.407 321.23 141.423 321.23 131.915 cv
321.23 126.273 322.64 120.288 325.8 115.883 cv
cp
352.388 103.022 mo
350.976 100.731 345.72 99.5068 343.259 99.5068 cv
335.492 99.5068 330.211 104.962 329.151 109.898 cv
328.449 108.134 327.916 106.021 327.916 103.904 cv
327.916 96.1582 333.205 86.6494 346.078 86.6494 cv
357.322 86.6494 361.722 92.6328 363.315 92.6328 cv
365.074 92.6328 366.838 90.8687 368.253 90.8687 cv
370.189 90.8687 370.189 93.8662 370.189 95.9834 cv
370.189 103.022 367.019 115.179 359.082 119.586 cv
357.67 116.586 354.853 113.238 350.302 111.131 cv
349.072 110.604 348.542 109.547 348.542 108.49 cv
348.542 106.549 350.302 104.079 352.388 103.022 cv
cp
f
203.399 64.6313 mo
203.399 70.792 225.414 100.911 229.645 100.911 cv
233.17 100.911 235.804 94.748 235.804 89.458 cv
235.804 88.0586 235.452 86.6494 234.758 85.5879 cv
231.584 81.1846 209.216 63.5718 204.279 63.5718 cv
203.747 63.5718 203.399 64.1035 203.399 64.6313 cv
cp
73.9482 46.4897 mo
73.9482 50.0156 60.5684 61.8101 55.8179 61.8101 cv
54.0591 61.8101 53.5283 59.7012 53.5283 57.7646 cv
53.5283 54.249 55.1147 49.3105 57.0527 47.7217 cv
59.3345 45.6094 64.6201 44.5625 68.6724 44.5625 cv
71.1294 44.5625 73.9482 45.083 73.9482 46.4897 cv
cp
234.758 56.7051 mo
234.758 46.1367 206.18 26.9424 205.867 18.6665 cv
205.837 17.9102 206.247 17.1577 206.888 16.4829 cv
211.783 11.3237 232.112 7.55957 232.112 3.16064 cv
232.112 .876953 227.882 .876953 225.764 .876953 cv
209.391 .876953 185.437 6.86328 185.437 12.6719 cv
185.437 18.6665 206.924 33.2881 206.924 40.5068 cv
206.924 42.4453 205.689 43.1514 203.747 43.1514 cv
197.766 43.1514 184.731 35.9238 178.571 35.9238 cv
175.751 35.9238 174.692 37.8594 174.692 40.6836 cv
174.692 49.1362 184.731 65.1621 184.731 69.9067 cv
184.731 70.4385 184.556 71.1431 183.85 71.1431 cv
180.677 71.1431 165.719 53.5415 160.429 53.5415 cv
158.492 53.5415 158.315 56.1763 158.315 60.0537 cv
158.315 66.041 li
158.315 70.0889 158.136 72.5552 156.208 72.5552 cv
151.625 72.5552 149.508 59.7012 145.113 59.7012 cv
140.529 59.7012 139.646 82.5942 135.251 82.5942 cv
130.138 82.5942 134.544 57.4087 129.609 57.4087 cv
124.154 57.4087 117.984 74.1416 114.107 74.1416 cv
112.704 74.1416 112.352 72.731 112.352 71.4976 cv
112.352 66.394 115.341 58.1152 115.341 53.1895 cv
115.341 50.7197 114.634 49.3105 112.526 49.3105 cv
107.063 49.3105 95.0845 58.1152 90.5117 58.1152 cv
89.8066 58.1152 88.9258 57.7646 88.9258 57.0581 cv
88.9258 52.8384 108.122 39.4492 108.122 33.4658 cv
108.122 27.6445 81.6948 31.5264 81.6948 24.8262 cv
81.6948 19.1948 100.551 13.3799 100.551 7.56982 cv
100.551 2.45801 78.1821 .17627 69.5542 .17627 cv
59.1582 .17627 53.5283 1.3999 53.5283 4.396 cv
53.5283 8.97998 77.1265 10.3911 77.1265 14.4336 cv
77.1265 18.3154 52.6475 28.7031 52.6475 34.6895 cv
52.6475 39.9766 87.1626 35.04 87.1626 40.5068 cv
87.1626 46.4897 57.0527 72.376 57.0527 81.0039 cv
57.0527 82.9463 58.4663 83.8276 60.394 83.8276 cv
69.5542 83.8276 93.3218 66.394 99.8452 66.394 cv
102.137 66.394 102.314 69.2051 102.314 71.6733 cv
102.314 76.2588 100.729 83.2969 100.729 88.4097 cv
100.729 92.4551 101.784 95.2754 105.302 95.2754 cv
111.824 95.2754 117.808 84.1787 122.214 84.1787 cv
127.845 84.1787 124.505 116.762 132.958 116.762 cv
140.176 116.762 143.172 81.5356 147.747 81.5356 cv
152.331 81.5356 156.035 91.751 160.254 91.751 cv
165.54 91.751 163.074 73.9658 168.714 73.9658 cv
174.869 73.9658 192.479 95.1016 200.41 95.1016 cv
202.87 95.1016 203.747 93.1602 203.747 90.6914 cv
203.747 81.3584 190.724 60.2324 190.724 53.5415 cv
190.724 51.7793 191.244 51.2495 193.183 51.2495 cv
200.056 51.2495 220.137 60.7578 229.645 60.7578 cv
232.819 60.7578 234.758 58.9976 234.758 56.7051 cv
cp
216.434 21.8369 mo
216.434 25.0024 227.531 31.8779 232.643 31.8779 cv
235.628 31.8779 236.512 27.8232 236.512 23.5923 cv
236.512 18.3154 234.229 18.1367 229.645 18.1367 cv
223.837 18.1367 216.434 19.7236 216.434 21.8369 cv
cp
175.046 3.86914 mo
175.046 2.81104 169.764 1.75146 162.545 1.75146 cv
151.097 1.75146 152.683 11.2729 143.879 11.2729 cv
134.719 11.2729 137.002 1.3999 125.379 1.3999 cv
118.336 1.3999 111.824 2.63477 111.824 4.21924 cv
111.824 6.33594 120.099 5.45313 120.099 11.2729 cv
120.099 17.4316 102.314 19.1948 102.314 22.8945 cv
102.314 24.1201 103.713 24.6519 105.479 24.6519 cv
109.355 24.6519 115.517 22.8945 119.922 22.8945 cv
122.39 22.8945 124.681 23.416 124.681 25.709 cv
124.681 30.1143 115.165 38.0396 115.165 41.5615 cv
115.165 42.6211 116.044 42.9756 116.925 42.9756 cv
120.451 42.9756 126.436 33.9902 132.075 33.9902 cv
141.411 33.9902 135.251 53.8926 140.35 53.8926 cv
145.64 53.8926 143.349 34.3359 150.919 34.3359 cv
157.092 34.3359 161.664 47.9004 165.894 47.9004 cv
166.954 47.9004 167.832 47.0195 167.832 45.7861 cv
167.832 42.0928 162.545 34.5137 162.545 29.5859 cv
162.545 26.5884 164.661 25.1777 167.48 25.1777 cv
171.525 25.1777 176.987 27.6445 179.972 27.6445 cv
181.029 27.6445 182.087 27.2939 182.087 26.062 cv
182.087 21.8369 166.423 17.2573 166.423 11.8003 cv
166.423 6.33594 175.046 6.33594 175.046 3.86914 cv
cp
f
487.288 32.4082 mo
487.288 48.0781 475.871 60.0537 455.238 63.3965 cv
457.535 63.5718 459.652 63.5718 461.769 63.5718 cv
485.875 63.5718 494.695 52.6587 494.695 43.5039 cv
494.695 38.3916 491.874 33.8164 487.288 32.4082 cv
cp
457.535 50.1904 mo
457.535 37.6855 427.617 34.5137 427.617 31.6992 cv
427.617 29.4121 444.328 25.5303 452.953 25.3555 cv
439.747 8.45068 420.921 10.2134 420.921 7.22119 cv
420.921 5.45313 435.02 1.92725 448.033 1.92725 cv
458.947 1.92725 469.167 4.396 469.167 12.6719 cv
469.167 17.2573 465.468 22.0166 465.468 29.0557 cv
465.468 32.9336 467.4 36.2754 472.519 36.2754 cv
477.988 36.2754 479.217 30.4658 479.217 24.2954 cv
479.217 19.1948 478.335 15.3154 478.335 12.8486 cv
478.335 5.45313 483.412 .52832 490.638 .52832 cv
496.631 .52832 498.042 3.16064 506.857 3.16064 cv
502.095 5.98486 500.335 11.0967 500.335 13.5552 cv
500.335 20.9585 505.098 26.062 505.098 41.2119 cv
505.098 69.0293 479.041 78.8926 447.146 78.8926 cv
438.375 78.8926 429.027 78.186 419.859 76.7856 cv
418.453 76.6094 418.1 76.2588 418.1 75.3765 cv
418.1 73.084 430.619 71.8496 430.619 60.584 cv
430.619 56.1763 429.203 51.9551 429.203 50.3701 cv
429.203 49.4893 429.909 48.9575 430.619 48.9575 cv
433.259 48.9575 438.551 59.1733 448.385 59.1733 cv
451.009 59.1733 457.535 58.292 457.535 50.1904 cv
cp
486.234 11.2729 mo
486.234 13.7305 488.169 15.667 490.638 15.667 cv
493.107 15.667 495.048 13.7305 495.048 11.2729 cv
495.048 8.80371 493.107 6.86328 490.638 6.86328 cv
488.169 6.86328 486.234 8.80371 486.234 11.2729 cv
cp
f
470.583 174.002 mo
470.583 170.305 461.235 169.956 460.358 159.562 cv
460.177 157.978 459.652 155.166 457.707 155.166 cv
454.537 155.166 457.001 164.85 453.478 164.85 cv
445.382 164.85 442.742 148.996 439.747 148.996 cv
439.037 148.996 438.195 149.522 438.195 151.64 cv
438.195 153.577 438.551 154.813 438.551 157.093 cv
438.551 159.386 438.018 160.972 435.906 160.972 cv
431.143 160.972 426.916 149.876 422.858 149.876 cv
421.976 149.876 421.099 150.407 421.099 151.286 cv
421.099 153.401 424.622 157.27 424.622 159.21 cv
424.622 163.44 413.166 161.147 413.166 164.673 cv
413.166 166.257 414.744 166.781 416.861 166.781 cv
420.57 166.781 426.386 165.205 429.379 165.205 cv
431.143 165.205 433.79 165.555 433.79 167.838 cv
433.79 170.305 427.445 173.472 427.445 175.764 cv
427.445 176.821 428.502 177.342 429.379 177.342 cv
434.142 177.342 442.565 169.074 448.557 169.074 cv
449.611 169.074 452.248 169.601 452.248 171.188 cv
452.248 173.472 446.264 177.517 446.264 180.865 cv
446.264 181.747 446.798 182.806 447.852 182.806 cv
451.009 182.806 455.238 174.53 461.235 174.53 cv
463.529 174.53 466.879 175.412 468.643 175.412 cv
470.054 175.412 470.583 174.53 470.583 174.002 cv
cp
475.166 259.42 mo
477.988 250.618 481.515 244.446 487.288 234.938 cv
481.515 231.952 466.173 225.604 466.173 215.213 cv
466.173 203.06 481.33 193.551 484.469 193.551 cv
485.875 193.551 486.234 194.783 486.234 197.076 cv
486.234 203.413 483.236 213.627 483.236 219.091 cv
483.236 224.017 486.41 228.777 489.228 228.777 cv
492.226 228.777 500.507 218.212 500.507 207.818 cv
500.507 189.142 484.117 183.511 479.041 183.511 cv
474.283 183.511 465.644 191.258 445.382 191.258 cv
407.526 191.258 398.887 153.754 398.887 137.37 cv
398.887 136.665 399.059 136.487 399.236 136.487 cv
400.118 136.487 403.822 141.071 415.807 141.071 cv
421.976 141.071 427.617 139.484 436.607 139.484 cv
457.707 139.484 467.056 154.108 480.104 172.768 cv
487.993 177.695 506.857 185.627 506.857 207.993 cv
506.857 227.719 485.875 238.64 480.805 259.772 cv
488.875 258.896 493.637 244.446 501.917 244.446 cv
506.152 244.446 508.091 247.798 508.091 253.086 cv
508.091 260.83 503.682 272.459 495.22 279.677 cv
495.396 278.971 495.396 278.089 495.396 277.03 cv
495.396 272.104 493.46 265.066 487.817 265.066 cv
479.041 265.066 476.219 274.572 471.285 282.491 cv
466.173 264.535 459.299 248.325 446.975 238.463 cv
434.5 228.425 412.985 233.879 412.985 215.567 cv
412.985 210.632 416.16 203.589 416.16 197.955 cv
416.16 196.018 415.807 194.255 414.744 192.843 cv
431.672 199.19 425.675 210.452 436.083 222.077 cv
442.565 229.483 460.534 236.526 470.936 266.992 cv
471.108 266.113 471.285 263.83 471.285 262.242 cv
471.285 236.173 436.784 210.632 433.79 200.062 cv
453.832 202.354 457.359 207.291 466.879 233.703 cv
468.816 239.17 475.166 252.734 475.166 259.42 cv
cp
f
378.828 73.084 mo
366.485 73.084 358.38 66.9233 358.38 63.7485 cv
358.38 62.1636 359.434 61.1108 360.85 61.1108 cv
364.725 61.1108 373.184 67.0928 376.005 67.0928 cv
376.71 67.0928 377.24 66.7471 377.24 65.6904 cv
377.24 62.5137 374.246 57.2334 374.246 54.5996 cv
374.246 53.8926 374.775 53.3662 375.833 53.3662 cv
380.587 53.3662 387.642 55.3066 391.347 55.3066 cv
392.577 55.3066 392.925 54.5996 392.925 53.8926 cv
392.925 50.0156 381.469 42.4453 381.469 40.1528 cv
381.469 38.0396 395.712 34.8647 395.712 31.5264 cv
395.712 27.9976 376.354 30.4658 376.354 27.1191 cv
376.354 24.6519 380.059 20.4287 380.059 18.4907 cv
380.059 17.6074 379.353 17.2573 378.122 17.2573 cv
376.535 17.2573 368.073 20.605 364.55 20.605 cv
362.786 20.605 360.668 20.2529 360.668 17.7837 cv
360.668 13.7305 367.543 9.33154 378.298 9.33154 cv
395.712 9.33154 406.114 21.3105 406.114 41.3877 cv
406.114 66.7471 388.344 73.084 378.828 73.084 cv
cp
344.49 39.625 mo
344.49 37.6855 337.607 33.9902 337.607 31.8779 cv
337.607 31.5264 337.956 31.3486 338.489 31.3486 cv
340.433 31.3486 343.78 32.0542 346.426 32.0542 cv
348.723 32.0542 349.072 22.1924 350.8 22.1924 cv
352.031 22.1924 354.142 31.5264 356.091 31.5264 cv
358.38 31.5264 362.605 28.8809 364.373 28.8809 cv
364.725 28.8809 365.074 29.0557 365.074 29.4121 cv
365.074 30.6455 360.668 35.3926 360.668 36.8047 cv
360.668 38.3916 370.542 40.3291 370.542 41.7417 cv
370.542 43.5039 360.492 43.3276 360.492 44.9121 cv
360.492 46.1367 364.197 51.0732 364.197 52.6587 cv
364.197 53.0127 364.016 53.1895 363.667 53.1895 cv
362.257 53.1895 356.793 50.7197 355.205 50.7197 cv
353.266 50.7197 350.13 57.939 348.542 57.939 cv
348.013 57.939 347.666 57.2334 347.666 56.3506 cv
347.308 49.3105 li
347.308 48.6064 346.963 47.9004 346.078 47.9004 cv
343.96 47.9004 339.904 47.7217 338.664 47.7217 cv
337.78 47.7217 337.431 47.5474 337.431 47.1963 cv
337.431 45.7861 344.49 40.8584 344.49 39.625 cv
cp
339.367 68.4976 mo
342.197 68.4976 342.726 75.3765 343.259 79.4194 cv
343.608 81.5356 343.96 81.7129 344.847 81.7129 cv
346.963 81.7129 350.302 73.6099 352.564 73.6099 cv
355.907 73.6099 364.902 82.9463 379.882 82.9463 cv
401.181 82.9463 421.275 67.9707 421.275 41.5615 cv
421.275 16.0234 403.288 1.05225 378.471 1.05225 cv
366.667 1.05225 358.023 6.86328 353.437 6.86328 cv
350.66 7.03857 346.426 0 344.309 0 cv
343.432 0 342.55 1.75146 342.55 4.75 cv
342.55 6.68896 342.55 12.8486 340.433 12.8486 cv
336.192 12.8486 319.82 .704102 319.82 5.10205 cv
319.82 9.15625 330.736 21.4873 330.736 24.6519 cv
330.736 27.8232 319.996 30.8203 319.996 32.9336 cv
319.996 36.8047 331.442 37.5098 331.442 42.4453 cv
331.442 47.3701 319.464 51.2495 319.464 54.9502 cv
319.464 57.939 331.442 55.832 331.442 59.5264 cv
331.442 63.2217 322.64 75.5508 322.64 79.0664 cv
322.64 79.9512 322.814 79.9512 323.515 79.9512 cv
326.859 79.9512 336.897 68.4976 339.367 68.4976 cv
cp
f
259.587 377.772 mo
259.587 379.36 259.055 381.126 257.644 382.887 cv
255.717 379.36 250.251 377.595 247.781 377.599 cv
229.645 377.599 236.512 403.845 217.137 403.845 cv
209.04 403.845 208.333 402.786 205.338 402.786 cv
204.104 402.786 203.399 403.317 203.399 404.374 cv
203.399 408.958 209.919 420.22 228.057 420.22 cv
246.198 420.22 263.641 409.134 263.641 395.381 cv
263.641 393.095 263.111 390.643 262.053 388.175 cv
262.758 387.119 264.523 386.409 266.108 386.409 cv
268.918 386.409 270.506 389.591 273.148 389.591 cv
275.971 389.591 278.086 387.472 278.086 384.651 cv
278.086 382.359 276.852 380.773 274.735 379.711 cv
276.147 378.657 277.203 376.891 277.203 374.955 cv
277.203 371.957 275.088 369.157 271.563 369.157 cv
269.974 369.157 268.918 369.686 267.692 370.898 cv
267.342 367.743 265.578 364.747 262.229 364.747 cv
259.587 364.747 257.644 366.685 257.644 369.686 cv
257.644 372.481 259.587 374.778 259.587 377.772 cv
cp
f
163.074 345.027 mo
177.163 348.531 184.205 356.108 185.614 365.1 cv
187.024 373.719 188.784 380.773 192.126 384.294 cv
196.532 389.234 205.161 393.619 212.742 393.619 cv
219.08 393.619 224.181 391.524 224.181 385.708 cv
224.181 379.36 215.553 365.1 202.87 365.1 cv
201.645 365.1 200.056 365.28 198.295 365.28 cv
196.709 365.28 194.418 364.926 193.007 363.692 cv
190.195 361.221 189.315 348.01 184.025 340.09 cv
178.219 331.283 171.88 328.813 163.25 328.813 cv
157.092 328.813 150.215 332.155 150.215 337.092 cv
150.215 340.09 151.8 342.2 163.074 345.027 cv
cp
212.211 384.474 mo
206.924 384.474 199.002 378.831 199.002 375.656 cv
199.002 373.013 201.471 371.604 203.399 371.604 cv
207.807 371.604 215.727 377.069 215.727 381.649 cv
215.727 382.887 214.845 384.474 212.211 384.474 cv
cp
f
196.003 247.27 mo
196.003 235.996 222.781 230.011 222.781 216.095 cv
222.781 213.804 221.898 209.76 220.311 206.76 cv
229.645 211.865 236.512 220.505 236.512 227.543 cv
236.512 239.696 223.837 245.329 223.837 252.908 cv
223.837 261.714 237.394 263.125 237.394 274.044 cv
237.394 283.018 224.534 293.412 224.534 305.036 cv
224.534 314.016 230.877 321.408 240.564 322.644 cv
237.394 323.35 234.579 323.878 231.584 323.878 cv
213.79 323.878 195.475 309.269 195.475 291.822 cv
195.475 283.192 199.18 275.631 204.808 270.168 cv
209.743 274.396 214.671 277.209 217.844 277.209 cv
220.664 277.209 221.898 275.806 221.898 273.693 cv
221.898 267.167 196.003 261.187 196.003 247.27 cv
cp
252.191 336.209 mo
246.148 338.975 243.739 338.501 243.739 344.673 cv
243.739 346.961 243.208 349.939 243.208 351.527 cv
243.208 353.642 243.563 354.879 246.024 354.879 cv
252.368 354.879 262.405 344.141 262.405 334.977 cv
262.405 332.505 260.995 331.462 259.409 331.462 cv
257.996 331.462 256.422 334.271 252.191 336.209 cv
cp
251.485 323.524 mo
251.485 315.604 235.101 315.43 235.101 303.448 cv
235.101 300.45 237.039 295.35 240.918 289.884 cv
242.507 299.04 246.198 303.8 254.128 306.798 cv
269.799 312.605 271.916 321.408 271.916 330.754 cv
271.916 346.609 260.82 366.332 232.292 366.332 cv
209.391 366.332 193.007 345.902 193.007 328.639 cv
193.007 323.878 194.242 318.601 197.236 318.601 cv
199.882 318.601 200.762 320.707 202.87 322.821 cv
210.802 330.754 219.429 332.861 231.935 332.861 cv
243.208 332.861 251.485 328.284 251.485 323.524 cv
cp
f
126.761 327.346 mo
127.191 331.025 124.563 334.342 120.887 334.772 cv
117.208 335.2 113.875 332.567 113.456 328.892 cv
113.028 325.213 115.654 321.88 119.335 321.451 cv
123.013 321.021 126.337 323.659 126.761 327.346 cv
cp
93.8491 334.271 mo
94.5884 340.287 100.197 344.847 106.537 344.141 cv
108.818 343.892 110.941 343.261 112.352 342.379 cv
113.761 348.01 118.49 351.635 124.877 350.799 cv
131.365 349.957 135.778 344.847 135.074 338.325 cv
134.886 336.572 134.544 335.503 134.017 334.271 cv
134.017 334.271 134.875 334.183 135.524 334.061 cv
141.879 332.861 146.17 327.759 145.64 321.589 cv
144.937 315.249 139.25 310.543 133.324 311.271 cv
131.029 311.554 128.905 312.43 127.494 313.662 cv
125.906 308.386 120.94 303.796 114.158 304.919 cv
108.033 305.935 103.982 311.129 104.598 317.716 cv
104.695 318.786 104.946 320.009 105.479 321.232 cv
105.479 321.232 104.436 321.389 103.726 321.493 cv
98.5854 322.257 93.0112 327.434 93.8491 334.271 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 14.0.0%%For: (Scott Chamberlain) ()%%Title: (Unilever Logo.eps)%%CreationDate: 8/5/10 4:17 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&k<e4OZ7pT3_!bZ_ak4b!ac=/u1CO\N!<XC%D&h-`F+/M_I]GN.>I#NtiS;,]b?>!kX4<oTE`[C];Yaq.nQK_@kF;KX9:E;W%>g:u;;H6F9\Z4sf,*gl_SQ@oPC2)5L%'6M*'uS8T$[UO4/VgtBAW?kr(7QtjYA0hZg2=W(4.S^EhJ@De&uj[#q,FNIX6!sjX3s^S%dgDD?g/G^eX1o_M^7MCm[A7]n=KF`LpT?QBpZbqFI&=m[NL+t[[<c#[]Mr84^Yj):+4sBMo0p(AK`QDKP,^@%6EejTI^+GL(J]%l%QRBhMUmBPpKghqA34_25lG1S7-#M@-"o]oRa:%S2n.#6O_YncQ^"2GV/)=C8nS=6sqQftJW`Qc3!_C?5(g;[SIUI9u1uu4+Qt]e;%*WN(,R`03V$%HVW!T30,[HbNXP"1e(>,0j=Hr-3$em9c/F7&Bam=,+`Y\XfVPdP3#H*:Ok?SuS(!!ZSY/:I&eq-'o(,rPGaEkR't%<60Qhqcfm3/h?>`C)>6m=mt<[iD%ctkVH>c_ogjdJm5-9S@#;UbN:Z"n>^5<Bj8"<Ui+Yr9%pM4=jp&J-B-HJ^f2!f2!\2-]>hjp%.Gfhk"4Eu?!<GsL[J*j79m%"\VJT8)fh]6Ig8dIK>>%$L(R\:WOoAqf5<<\46+:'8XO40O>73rq*CWOA?-j'656-6RPo9X!<@o%I%X=oM]&(o5W<k9"ocK]pRHe!Tno7+B.[0lg3h8#(_iU:RuIhrI)<7gZDY2`Gda/?LDT9d[q2LWcSYa/kZ2p9'AQA)^tX'Fe(B!YSe%S&IEkpqaGG=fdn5@P.M2^Tgh5J@,^fI'ZYb-\VWQ.@9R=\SPFDG.ERXb@UM[*AJQf*=qP"5/fJVEuiU.Iq((#'E6!T3%$mgq@%"i%^Te9o#_1mI3@*h#3%+W`hf)'[)dB%UU+PDan2JW3s'dG&$2^OFV#=dTS/;1E3or,_nb'_\;]&F];CLLBqBhan*BbE)*?4Ad8']_B%f:Y?1$g3;[YpHu5FOp(%>qu88[;^SBKdg!b]/W%QNSe\uFT(_g*BBGDDleZa_r#PN.@*f?df-LANWV7]N^%p9kkHRUYni$4LC9Y5%*BfFQNf3U(>NY6?C[`FIK<sU*M6k+/l)a,JS0.aM=qn_kIM=.$?2T\)E-@'Pa)"L4'QUPcMVT8-3Nd=;_i[kkTt%o&K!-VW3uo>q%3pi9N%7e]FK[5X<*Gb3%C$YD>qOIQ3O]0DufM'ne_M5Kq-9i2o"gug'&h-SXK!IA+"R]4Tk'/QK&)S-^`$nun15E/;#94>2,ebk'%_8j^=bPS.'dPk0++[>agE^c8lBGu:CrmDn+T\m^qqNFI<-7ogZl&T]1n)?#!E?+fqs3eV%p63\I-fQfXalho4nX'5#;T0h3&V'%@%WC4LZ^[t$9IjdP%[DUmD?0QS4NW+Y-Bh#omb=*^Y/j#q.<(c5DXd$2uR<&e<AWtI8O1pl0lO&)r[r])2/'BuNR0+-H/ND+OC=5'*%;q$802@(kfC/H^*>oa%)_7"GS=5Y\$A*1!1?;l"9I2g4,KQ48H0Ya>f_A9@]/27SR)6ZKLR`g$7,3(8T.e\kZE.6X^d_?us>Q8c7%2tfp\@0s;D^tFm5A$(o.d()Cnnsu*t73"=;.\>i2bbh<WfF!>Hq]<+:!H4<$Q)=6=fQ*!([7j%VTVl3K7FGY-_:-Em3,cAX_/hL@%244Z((0S0fr22nT)M+?d^-SC?d6KoS)d?/o7)+V]&R6P:@j?Quo%6!^"@fCAU'8IIZDK6$ia8'3q1SE#I[&%:D1m'B=-Z&*o+q:/%7[V)<BWEJr5(jrq<jn<q/nla^k(6FKOkZ^;QK,Pjp`YDCDrqTQq3qAP15.K^F(K#`@C,'WF('^r:[*h)dE`MnaLn2\CB/do@tGK&%**9ci5]Mk1NaRcu@qC68ADVu+E*dp.[$4Jmp<R_QX:WE8kh"9>[RF8\I`KiUqDNIghZDuF2Qd4Y5,:f+j#!(^GC5mGZ8L%OCrpnD%;p&ZiMi:[Ai&QgQj!_l3pWX=h#IHOPO+8&A#tBMGR,rRh0c\.#"G/\n25CE0[u8uTl3?\X^e_1q?qEqs6/-QJim<se=JWL6U`>#+%:.eYIkEUjG109_'9?*haCgcnXpl:8\!cjg/jrE*5^fJG9,'7pkcY>)X,&E>kiZ)2QaY=iAAoqH8puboIAiQb&H'K%B?_m1VlVV!,%GlZhGD3\S:i!pH^8ZReKQoRH8!Zrg4+g]F6Cr+N[*7B`q58Z&J1KVaf%f3#Qb`DRGBq2q*T0NRk^g)JV*30CSi$\k"GrQVC$pp1L%3Kq:JPuCgXT]U8@+tGYp('Qq_4H@NNNjE9QhEI&8.B`<@1<o@Y3f]I2,;.$lp#=bc]Rec:_`pdb'J;8A1iR`SMdmgBlhe^mKIb8,%'98I?!9#VB`XJ.s\P&VlGq-r:e5,QcDf$]c>Uch@R>)lm_Jr9^;S+@!9ET:MbFPkMN^XXd*/!i<r5Wf;E@$Um%RLET+>TP=jO/QO%C660@.kcfc^LC@VJL3]3=%4b"Gg:Cf`mpK[6,(e`q/\>>\.m4DO[=j1Hpa;lHZMk)n]RGlOuc%>,WN5H:lUB"8BdXT-o1.">Y6Ni%Z4boD^,;pK:e?9!;6i_/84D0k@j"IU2M<q"Ecc/[TCWdcM8]3PLB6c]Ac_552-uUO3.soFRriLXCr"A=`n7b7E,>aTVmqTT(ANQ4%m1S^;>gKV\D9<P>b9X[UPkPiIGiYEgI)_d8V@iU!!Kdp:<5l3d%rJm.7X9EJee35&0c<IFc..t'hF/]/;6e1Z$!0H<Gki>s7A$0L%0HHRa$HFm>.,#WF//Vq@lif!R3K''NTMY7.+P3/DVW!DPIG829Ps\90pc.4<L>oH=*.r<2U@Gk/X(8mmbu!ebiX1qSKM'=1.=Mpo%_`/.H$l<-XY"Q8PQ]*iagL\ZW.&Y27IVdMrrH];I'JZ1mTT6*>&ZmBQGqe4d>'&=;f8d*OV\T-meYK,pUimo8"\Ku@9K9,uV5[Q7%0BUD/Tr(7[N3#NM>'#IZ">PX=*79+dbf?,\=2[!FEkRG2-'YTP97b4gY*CD_]pZ:Ol'k?%S3$q>AN?oO;&]W!O!@6&U6+8+^=j:,%>cVuU6$o&Y@t^0[q<c^'\<]Nq.oX)I1j/p6$ZT/s$Y_jqQDZR:0Pu[+PJB+l'iN*ra/1)ZnA5bu-Gl0:LQ"sYn9MY$K#kdL*J8<Z%LXEiSi<4(_BTpOd'Gd4YA/oRt)(-j,`\en67'KAne8hP^9.ZYcf5<T\]@sP\q`q+M&Q3CsXus0Wk_diT,lUc=r#YMHKHA)tar.0S%_6;<dh1BEZ3#Z5E8f/p<'qTG$6AA&5C33G^G9_>TX@N[W`t28bKt_%.>#:XcNAtU?BU'IDd*rN)%u/13LZiM[X-Za8k@)5VUtR,W%cmG+4aI/u-_U_)C/(]'VhNVNsVf/;*M!?Qu>h!#X9)5.(o`tb7q7>&Jjt]\6<!$,pK9$F$Qrb=B8Q8ZgeSMS$-$g;.8[V.D&$84$%=O@nPC"B*sH*(As*8W/$^K$,!C73eJ=@2N!TNFiE=DA^MH\fDTV%9iG:!+3]?:NPi[?8UJ/Z?X[j*D,S5,;$92i'[b-eCI:7U@NW%R,FB2G&7=*jW&i4e<8ciV3P=\c_3BG[j6[Q6o9?ZV.>"QeQg=D4UmS)8?GP-*N7hQ4:;(Q.BFp^Ti.<3Tu=-ceA*pTDTu%YV-Y7$%irnC8gdd')%ALfT9uD'q#Dri;LZ0.'`k'StP(Nn<ACs^@kPc^0"[P#.5&07=>)DlW@QM,:,BK8B\HRqE8P.S>T\PB;HQ'=][1!p3%$!4sf`j1]"?G>WiTf0e9lA7j`>j);G%T.XCn8iKfE,62V"8D9kMaCNF<)+&UEchS)95I;i(c[;DGg<.&\]hHUU(s,G^7n/E5P<.0%SqA6'0g7cn)pAr<0e#I5a#RCm]oE!3Z3kn('Z<-OFT/G`N`\FY#/pMl?2_^bS(TiBCQcM-(E*uSNEJQML8n(p,Km2BhDX=sNpse+%e@:QqH1RG"MN!Yo\r+?hbMZlM+#_/<g98a\+STVIm%aP<@RV#cpQg'F#e(K\P"IL4HeB]"%ZOp?_-da1$6<9!d"HRYCD+D)&_fP5%lHM;/O-a'uVXU?[:&+h-D=2&Ug9be*6ull$bnXDrOgd^AN7^fD1D)!NTfWtam"DdiFV!(Oc>76cMsrO5Fr^'1k&JATHkg1qQ)fu2%XqYDgX%A[R,R]t'/n[Q=Pk^?.f8J"CCXKatU$M1+Efk+0'RP?@Q)T]d()><)']Pr%R[Iuo;]Kc"RJtO+`]^mn=8Gh0Niqkp(%+*.%Er!L&$gOYP(*8L'qemnU\2L[o3H4hl:uRj+r@@8;jle+(50n?aW\a/c/pDe1P/@cFgP($;nMSTj92n+6b\9d4jr@SUgi4ic?),L6%29O[AB<]I$#@sG3okcCNS9&nf9&)d*4lC.#V9!Keb*SJK4%JrI`!9%UM"M\H9U&n(^Nkq&aYA^^_`n72lWf0Blk`h-j[O&FdLk>(%Y<J!<k$Cl!-/lB'D_<Ok7TYN<BsH/\7ETIb=7J?,j$`DEob+9G;lbQ=O,;[Ef8#[bHXK"@T_ud%RO6X`\=LT!\g/#H^Vc<@Y"tSY%<8!^JSo[8,)VPVLmu./X(OI1b7s=WXr'#JmXlH^;nRpJ=ENN?cZ'`"QgJPoG/XOYd'P@"&mKIW:&`nmA.)kkiGW[%cC3:3sCFGGZ%s)4%P#Jr"4A>j;V&a3rYo%)H\KV&Qn4$F`]T;#sNB;q3<lepNNV`981;2XGHR%2W&^GXohTK'f:*Zk*@d#OH0;2r&DI^:fkW"`tV%[j%1Zd`U?8K&=9<+d]Q`5-><ZG+us)L%+?<]1u&_TN[bq?U?bp.!BB"mhD8o`rU*_HmGRTr?-bDjMYrI`jqPj(G*rKiAra2Mt;8D%h0ZP&gkt3`=_MmOSD%HcNgH,]?f\MZcdFX0"YgM14JLWo^bLesC6$`QX8TP3&DrOY\tU!-I$C-?')so.D5AZ2ia0_jr^"TEodf/n%1:UDUniNlE:lbjBCZ(R-0Zo<-bR6qlQr>E`^o9doiMP$$kH^'HbbJ>SR#9p3<XI0U-rhGr'm^4Z&`ooa__3gl^[4KpGc`EI8Ve#2%?+i@ai0qbs:C)%kB9rKfdeXW;UFAN>kI(DV+@pDRJrF"a(\C+_:g>O!?$V#RL@FF>9=eq\gPo>tF9Kg+`B5R>^-C!MUbQ<u#PH4I%I7*?,F"9NB1=;B8L_#MD1`ZVeNTPo]0)I-gD$Fp5M^U6G?/W]XP1Wd=RBDHk$)^:nH]&n-YK)6'=IF/$U5L^0d"@%4_>HiemtpT=%C,^4;):d'hrBIOp=ql;c*(GmUMQV`G.(k^:a,oF5@hnTe=ak+_*cS.JH+BPJk'SGu%jS9FCk'fWT`9XS(gT3AB-lUq8-9WQ74=a!%EnR'Y<eB'G^0Ob*gX@AC9ZZGRSr2<8B"UKGJa!Y\gt_1J2)E=R#B24(2sr-SrX"u>\`=nNaL(Aar^SPR=mr%>JRC@a*K[aNcJJRZ%PMekj7sSa3c^A8UZ')H;7P&Uc,>^*S"`l]khb?J@84UTC!f/M=`:Pn+7ri0Y!P*"1o/1UTPj^mO4;HFb<jmCd?-P5\Y*4d74b:AF%+iBE@F/440man.[c/m[7lU#Gn_lMr6ftfLY^4.L)Rc`mkNiV&YX;+X&@ib,JVKnDZr/ij:L$O78k0oR;3Ci$H2XQ(`IE@UsS5LbB%'6Hk2fc-@>O2CF&N'9gu@s^(rKur58]c#[>@PtFZEnPA&H1j4T>Z,OA7T]Adf^:c9,">5&QbWCeQ2[UXJU.O6&U&QH"b5\'@BYR#%QcCXjG;k4ZY^C)N7:)8V\[)]c^/ln0S*8)o0W&c/%i"bHF)'eX2<Ooe;sf:f/o.R[UCIFNKu]<G#(hT&b*_A3jY2^I;$^iZd_/c6%A'+D.Gl3XoMfcUj=-7O7=$u(!Q_\HDcJbu>e4__4Ylf^,8u+;]CNZp;9)]qC1U.2%B.3'U*c=di4IXtsHo2$jfHmPqEi<rKJ3F$@%?ZWIh?n"Na@]NJW'Tl;;e*YkH<1!+4YS8HR1_9"g,i%2Ki3WG:C7rcY?(t;M1!okV@@S,-qQR68&W[V]BRb+%8_.K&B6=X<Z#^=c%SJdYjF)"0?*n>:`GmBHD_Db!EFbA`l)5fh^>>Fb(b'OKFG9M?mJu;KTj&cK;b]Ek87<m#d@^j-[0#%QknA\W$*Bp3!].n\</"geg%:E"p5s3"mH$nf0U:6smSZsksod`*QXaXNbHg@i@HHS#Ld]2;IJYF<e+ncthGZBuTj3gKM?D\:iG`SIqCj0+>.,F3LiLkj9MHPTor%,EeO#9QW[=eAOGiGS?uS^(9T)/G\?;nQ%@09[]g%^7a,,+]'e3:T.@+Lc@mV0?\:>;sB-(_sq`I='uHZG$.Gd]ia6%nB,[L,uK[l%^H9;Z817Hq(r<2'=8VMX3\h4!M/X#PM_$I$^'4*^nsq6GS`Z.(bh#4%Oa+nm06g>E$'']X%7$TQ`jrAIk#rd7(5XniAYp[I(UZ$Q%m3U=%I3u2;'=[(L/U:;@kJpiY$#bg1mha&TEZRFacAb3q)T\<X$Y2tns.fS$Z:F5sdCB2NU@:Krf9u'#"@P9cH1VSPAT-qIpriE4%Ebs9>P`P<hdC#YEK"<!E(W"[dfa"B,ie"QnpQ1++DPb`Ag^?Gm?fh5_%Nu[GjnC`m<Te?sgp5#3ET2ZN"!j7m4YG9Hn'%s`]n(%b%3NqhR\NNJC!8iXr^Mi"5?l--`4FGdS-!H`4f8@KR.2mrV#IaJV\'_Of>+&q1\FQ0i'bPNZ4,:5\/2ZQXV3+l#S=8@<<6fj6q5u\1%Qf<%,?9/ZR8E'-R#RnMdqZERE,hnB"0fd:kh-Z7+_6,X`<g.o$=;d^D\c.)#jH?^sV.b@cWAbSeI[fss4SMC5+qBq+P@kngj0:Q6%T4GqQkq(g"K/-V,,CpmCmf&fr;aW@/Eg1Xg(e47_:#*?3pZ$PW?PX/)r("i'9KNC'L$\0t?'(XNe;&f[NNa4Qk?Z"H;JiC</7Y!@%ml/W7gq@eN.;?=L+_`cb9,.%3Q)qoMcdCB>*a`Z>fI.NA-'+U9jT<D/i\APpRAb)NN@!XBO2A;Qe-U!QAKNgKL%drN3Rb<eipe,K%c5u#Wd#t%)&c^*gb?Nu;B!0?<'<f:tl\RaRF7O]!VTT7::GN)))KW\O0\?2'k0ZH$*T9.+I6-08Kd5c0!PSZYjU<5`'LtXj6imk:%'C>-%YRE[o=3f!7F9nKtm?-Ms\MgBKD]u;4:5EiDK>H-.^?=qZTm'8uYAq72jaqHS$S?D&"l%5FEP7a[NH/\?:<iL]F$)[O8n\9M%RqJcn\U1J9T[D9%*mt/^h>=iIJf>9'e_Q4I@Xq#Hgp1lN)kF*i[.hKr(V_5+qdZ-'ClZWMDf,pj:?LP^Ol\']@[BXT/g8p3aFu""%CJfJoKNf]1f/ZR;14dhQ8OtAGf1t=f4gllkPS@2'A39A+!lhsmDA\XKP"np7HV69G5D;;\ZQCH.cBN\[-BHZBogTHK\HYeuc89VA%=(mr'AQb8W^kJ:4R)d-N+-YeH$%/FbEBg<;Ti0r*kOuNL>)]IdX]8KE!iCAFgRD-XBn6"'f`%Y%=eu][<82J@F.]rV-eU_s8)[+;%QqCuM*@$Oo.D)riA:0/Q(FCXX5804nMQ>jL3WtKIo;iX]WQWW2!h*RW9A6.\gD"X>4Jmp$`V$RJ/&`g'l,H)3GsaGpDS=6k;UPmu%/O4QL3NmGiOqNg/E?lRZ&c,hURi=`<Bk.]l?(tZ:#KD(RnpsHN1Wcb$^@1?P'OJm)H,;_uSh#(k#q"u=>^,[V-4/h3)qFD2\\#^F%LF[\!<6T,ToZ#-)/riN.NJoIqFDW)r9VQ%P*>$?LF/-_i^CR1)niMbV6s[A\KOgg]k<;^7=^hVdd[5h-nA[f*]6u5W=-Sp!aLT\Q%h"iHTJ"4HNA@ga3-:/sKmMg,+/$nSQ*Ne\F7W:t7'+mHfLa_2g`M:9Qn)A-%B>eY:0g`0<H.Vn%nKs.XV]t2R;WOAnbB\[7MRtN4%A'3lq4;piKn"mH(pNfKB>8#e3&QpVKEHtk^g:nBnZ/E$58</HK@Yi";*gaiNK/!K%L&F$a/E5&]f(VsMrctB=#!DFq0=`YMAM8qQ%j&+eth(hIB17YKiRgI@'/kM5InF)EXg(sZEV9!,eMOZJ"kiI2TN5e1Wd=jcrJ8.8!.L<eUfab"b!NtOj:Bg#Z(X]-;R[I>S,'1sb%7&0m\"9.+^5E\1QoJK.I^R-on;%8k>cI;GXPo?iN!#PT5BR\pnBcVXZf4hj"Dna\5mUu+OU>#"Bk](+nqpTNuC=aAKoN1%>4E6rf%lTKL"gMZ^gqi/'s@NkL"I'+eLgNY!uHh-7n:\CQrQs=#&imU?"eubf"[FSet6`9TLUXDo#Ed3uf*nL=A-P[IjP.h,r7+pKfbOnK>%.UFE.q;9#,(TVK!p6U#pQBiHh<9qepe>ukPBtPd2.d^8qfiG[+aaCeUGjW!Me$%Vbd^$^V?+f+KD=(lJh<TG60:U4tgT:.3gH$i3%V-*c4UQ8@E6K=k-!S$!?X5NFqfC&Xio`DP=H[pnOc)hd3om6#=?"n`:?@k3DGjb8nT+-ETJ%qSEoigNOi0.,\>%r1r0D4VLhbLZW%("F3hj/pmW"[jV07uXnPe\VDPP8>=+<gC&Fr@!ku(N+lf'/2nDorYAdo>I>0aO2G\=Cq5F^"Q%g%N<TA29;-F>%6G3(f$o/n,?Ka%Ar\BKe`9=HF&DgL_;&0.-$bYMfI<)XnEE'O:TQZLn8g+FjR$=LncM)RJYIW?NT<t-rg/dqL!n`I"<K4AqjPT&[^r&$AtWB'9*PYX%'#PYJa4!Yo$A:_MEVc123uJ`fe4K;'(OGr;^@<*9<6TICjoa46'TuPgoubH*CFA*U;^hWh_LJj?]QBTdB?2GUbjldkB]V,;"!FQs%$D+1'I71%7S,%P90f7rA$u)5kPolYk[=Y:brsku\heFeMlq7..rI0*8Ghd\K#!Q9f0)YUIhLNYI^`2%9k?bV)U2'q5k1]4Fs#3YG%TREfjb=A]6g9*>I*A*]4#KXDNnQ5H<Z3u&k0\>MNrDRESeq#e6TQSV,4B;E\e9eh\Q?P[\21VoF2)^VXkM-$5ctP<UeJNh92d\bL%YAk]&CTdSJkOi()a$Qg]jp&m-MY&Wk`8LI5[3r?Z@mWMAKLDp;f.,,>C)k/6\>oQf&c13GYt5t:reE3HVtWMQ!<:AcZN!'M>jG?c%B0r!k,Sh1:s4?K:`q!InPlEsEC$4kjs2EF]5>29PHL9hoG$_h])lAnES6%66LujW([/XjS]4tk.B@'WW`gP!,s7B81b>8DfjBo=H%mRNf#Y_rJZ1]"'$hEU"=E4=tZG##h;o$(dbKV"Z=:]_--Dd@[Q7%C7L^[keTn-Q#)B_L.5<H=)BIpCuc>l%5,iN(\7]Rg2AmPqL^%Naq4:GoYgOQW0BcI",+DXnBDkio1^FN*S;U0CU<,/[qp`8_:.3[PF$4-Bi1+H.oEEWnjJTZRjST9fB!+IPt>CGFt@ip1s4&mtF?5%aYpUh'i%#i#<oNUB*0^6B!7\OV`PV*<GO;T9"17:7OLCQ'-U"a]"A4PE)c4P,gS!3DREdI+6*3]k"FSc2+)H%a/k+P&$5T`Y4AD0%#`32<)0NnSjHEoZ"TX?"ZmIZdD-%XH<X#_mjY%%9p6t?trhgZUaC5tg7kDn[odgD8KD%O[jCS#Ah.5cXeu_'dlF$%eGPtX=rO?rO%BtX0in($K5Zc1PNccBreg"07Vm6c`69'=Z)<2nIdHfVMa$+(SK?%&VNH$sg,,Ia;hot!j6k1)Z6b9gGY(1;Nfp=63F`&aij!+X>,%h9k%>mQFI5`]oa678QLSP'h?8$OEG4CK-L'J898O(12[U5LjobSWsTfGkmI0Iees]RHs-&eX%nimW542BtVA(:8ciaIW?=%L/`W$%f3/.\Zk`TM,kMQh@rEos7TrA6'$pEum?`1m3X<uR[G?E!nC6%ne2se>J_Ru]4/K.Dl>*P/0/m=F#M$RdFYA'e^o0fKI'qi/(LMGQ%L6lNL[JJU<Gfe0LZg2n<b372c$;`*c%5QCELMVl:E*%muC.Z4P#Z`FmQ..B.5RS!nk;#;>6+4-M`T,0"?/*$)[N>E=C[\\^Y;IRs%ggHree&Q;f*/_IPLkpR#@JCJ/HiH`k6(fPtV\a>]5V%TlTtg"%6e;\`?"I-cC9`=YWt,RiqUT%n%7!,'p6AEEB7sTY!T$bYP(l),%,ZC#pFh78<.rCF,E0\i)6?Mho)QPNUM`C14?GGE<]b,TfXk23b;hpk>L?_roElD([SZ^r%Id&mAf^W^"RnP)q=X1Li>8SZpWC>F8%C;.l+ql@G=h1%<>hE'3TTP>R_C4.f7dsM@eG&$K*9#(5\Y=OuQRAp!Z/Wu"9[p$H`UL'eg>jHi=>1$>aS[OS1Jni'MgZb&:"5%P$%dqX%NL5Iio2Z6<-2!Or*^tS2-FL-tF>o><rW;$RekbHi1+0V^'Y=2uRgfD3G@]qK*HDQo+Lfs2=n?KCX^HU,>q1DijO+PF\P_?u$%`d%e)X]t,&(m*=m5eP.;5h*l4-$Mc@cs&aZ[DlEl5de&-T08hs;9,7Ym7me'8OWV^obH[^iXdgo]1aD<?&;:oW%Be4/%#.SV>]*;%N]KX@GLSA48u%DD>97nuPP<A-f;XAUQcH9AFSs_RVI/Ykp04j87II9Q)YGfB+e<;RkbNcBU9<4#Wfkm"X823b]'X-%6n8PCq&Y<:%5s<6"KN9/t-;fi(gYj`m?eZSS`N);*7&k8*][I2Uq;j-Oc&%dj^Rl*S:fM7S5I^n0#]Pl)Pf6&K"k6ttTAc4W.S(jT@V8&Daf`Ja%:nN7?]dBBO-B%9F5<.@f%L;G1AL0Z:HWXI=OKNon^)rG=M4!h<\1^HIce&<\*pQs^`(BiSYfMAVs%'S/E37DYV-`8#%BL?h^1a?D%rT.r#Js&/JND:0YTh`'tGPsk%d\2<06j)]cDDau-ZoLVc)DYl3Sg=]EdfDh$bt8LY>kRAHeTrKVH`j%S&Qtr-I0[mi:Xm%>Q%FnF%LosZXOl9@9OFn>jg$M;k[G$po#(a1p*8(g"Wdl[IHkg(k'=>):*o(SF7&Uru6767-Ur$nc(g!a+ok4E(bduDNM8^#sm7O/$AEtA>%m(QYU\1mDoJY``Ul&0ZSVYU]JGGP\ko3pV;k2c/C1&6kg^^NZZ+P?uc"p`XD6aF]pdd+%t&Uc,h?87:kZ/=<U9mj^bbO77ooDp@K%[4YaA4P1A_@IDY2;9M5iJW^E-r]L=>Z!-=secMnK&Kue3=rUR1]2Q]-[A+]%j5[;bq!s0S+cSO!39YsmE(?:>;1CEp0pjqF8a0.J%<`E8'Mon97,L?p8Xa2kfSU_@<r42/mZI!s]o0To9%F.o(q\NH>ms5("YqI"$MOj6LM%#]n-&=gsMo,J-@hu*N@r-:5bPZ31DdP_A%Pg&^Gddm*%=3"+*Z#R4L]+<3B:ZT@'^4"\Z(Z2O1T6iBWS!E!&Ejt-oeWr/?XcKGMI;a1A2)B`R851[SI;V_1*rjGZXaJXVdI4R:%e8fKp@VY#g[Q([p*,/#Wo59,$Db_#_c]!n83J,'^5E5&ohckE`d2hPNp%<B9olmr\hrr4`GcL*n<==X_]=kWJS6K\Js4B?QG.*pS%NLP%#q9ui+[3'iI`Ll8(bOT7_o0ls-faZMj5's_C=C!tCrXQ'7l-]m7ou$,I5ch0;@Ahpfmp&1,/,MrY\=h:^,O7>Nm^;c@r1$\l%k>]n$M.j?r9Bg7XgJ2[4CNjNR9Ur1WnM?a#34jq:^&A8Nmag@a]:ud`L\@pHLU5o6GO7nAD>u=2f]hG_nR3X'lW/+BeIHb$_4>I;%/[RTSWZBmZWVU!rCMQS;dmQfMgR2D/=q0`Gr)foAhj&dT2=>@IZEeQdf]dMReOlWLmIS<WTXcQ6bF;s3Vq+Q,oHKV0lh%Zl47i&9%F:*)O]%pZJRGWKhhZa/WiD7F%SY"-QqnT89GO)H.;o$B8P'9Xh!0_nH5E<#'`Vrk3h]&%TKk9JtB_J.Jj$l&9;mUp.h%cIf9W$WH%g5g<Sl]=lb032T>dK;SujF6?%SaHNsReM$Ni43`!06H@D\TUfImG;b=[CEGhs!t$HV49,SM,'`\n#FZ>>dr=;4#QGT.HOo`kCGF[%/pGlFT:,#'TM?.LATstp*&:T2B"n,UEtU7WWD'qQ3h=5bQhnLE<aOLgGG^Cn;nJ;cq<*';kO2NNGH2+c:9BGlcYM6Kl/Au8RH`$<%jm]up#'HA*Ff+oI48.j]R74^[GC$XGY(_&1oD)A,KlhXUW*HE(4/>fn0ctoV<Z_fXX"3#A:+r3If0_V_Ib=O[&*aih^N!UWY30_o%5QFS%cL`aGT3n/):9P2YAn\)D]:%J9kqnM0R-T<Dh9pL63o+,TI_>KI$gdLtqfsWh;rGdMmF,":HP6J=#=J<0Ek*%Bl1)mmTA/AF%;IHE;]'2$!.E\"V\UL)%ceX=u>#q6?^,LX*4kWtShrd$(?`26Yl*g4seHu>]ZT!#JX;oY`/(<<[0@=UFHT1['G.QI!1ab*FMiYQT%-_SW6\]qR4Y.p=KB3D.)fd38dR8]-+:"$"!^U:</m53Ye]`4A8:00l^cjO=pLZtdn)641:mWA;-iBoCo45F3kXn][nPq/KNdnYC8%f7%t[]6L`r^:3n?H@]rirN,K\?*t4+r]mCCT"i`tD0qCf\osD5c?/M)T:4LWSa+s2LPM[(m"N`-k.Y=hhk+AU8frSEZZFU)h6VOn%<9rSimG)dCC,r,/"@(-m^m"5i%Ng-&54;LK2O+/qj_i/gq(9#&3LpJ&$7eqZR7cRRMtf,b_sBNF/A"$Fiq#@@RGRgSED[MD[*c<X%IdNQ;Vs`j=Fh<[Fp!XD"H[fpJkN&L^(@niEI^&i^VA&n"5l$[9*A0"7]o_F.e+(^aDa*7H_;"4CID$Qoe2dN-E_3:5"@2<MR<@,%%[K!3`G?)1,D1t+.=L]u"h!Fg-\e$sI0AXj\C\a($pK!jmf&]9ge"^1DcfUt9)#X%$*$k*Ic;SF;jSA280>3Rs6CrXS2ci5E:@Q`E%?`2J#AX0tK!3om(pF^X`^]!eQc1te`e&nf$3PAmg_]W!n4YCrV:TD6L^F?o]k5XdD#<kl<S@r5^9HA$V4`.YeT?\&uIHPET!M?:e%T549$PI(0'54)iHmG-/lBBn)r1%8oGpY*J^C1HNfH.iKXGeU_uZu`QQ&T;Tq(,oF"`Rc;-C+HnTqhK,DAafA-_)9L(+Oa#m/>e^C%f%$abiq^jKb4R"3Pu"TM;[`>X4oBDZp1IfKp#$-uU"`A4^:(H&r.NI&m#_37c^?#U0b<F1D3#Mq`(G@1E4_[_e2Ep86,T0EJ[q!7%o$-m82SXOKb)DnEVC[>.AoqS`5JF)$o/qC!.Ed.M>@[1H][Q-9j(`8*8i^g\KQLtRJ<eX2f:PI?Ske_q,<FYO1;c30h/2&[Sa*.Z%8DQ=R1Z)7%JTn\0pB(,Vgo59J.tdS4k?R<EF`)(dF:,^_f<:3'[lsd:[^C]K2=BnL4.S"=.it__G"ZY,OA<W\"P_lqXOBdTVl5UD%.Vk`!,oT?gVl5Y]Kn4G:F@rqKmp,VMI&j9MJ?D2L-_K$X*;<cLeN91uqIi*hk4HdX</c.jhU?+0iYFLdQWsIgZ0`cAG^F"13T'0C%;s]98"k<SG$",`'?&IN&3<pBCXfu0eMWDJprZSX!NKnRQSkeI!4jMq$fXNHpGo5aKF/u_<HKk/B6213!8%"`$?ScR)90P9NoCftE%mYg@.r_FC^l*Lc5p9qD%.HqXf7\O`V8![-MFRGW"@FK@I(GKC]LRCbs?\f+36\CBb`1926H0\VjP5m#IIJ<"@^<WG5l7J.t#ebm%%WoG%_Db-;Mbh<F"7H$i:25Ct<.Sq"!Z)-5aD_TP[YB/AD&")7_H>j]X^I1\c+o,-K/I&>M=?h62qXS=HqQ1_lHpN)bENFYE0\Z2r%BOJed^YOePb[i2175T0.NpMU%%!3<$;VpQNDrY;m^ag4111iDob3]&_:ll3?HU_E6fT:UN7)M/""Y:b]\Q`eC=\n:Ud#pJ0BCBCp%M:B>kGV#hj?_(K3#sB,U]*ECN.1;rod_eX8E]f#aYMcU2g$.2q]+S;o#=3/fS15=BVl%eC*ukbJ26R^hTRN7G%-fiF6X^'oWg0J4%0e4-^4L84],I7_hUN\4?YF$.\Tb%]4H75XR*6'9l&"Y<%e+B/3=-o7fC\QeWJAq1/Ns:u\[=t5];YnU+RM?-mQQmD!V!heM(>KU#%S]:uIorL%LFB=kor/O'ed8WUi\PdT$KrjB.BncOqCS`q@dGe<$%U)WWPe7B]^DIb4:@%u9W(\;4Tt$6\BJ+6"`^MS,m5nihg:*CJ%RJd^[ad)cjJ/79S'$jn4eu.!f/IB(<eW/^uEEUU?l=6a`jUf6b88%SQip3b6X%HhMOW&7g5Fp[#g/B]m_r./bU4J$ib7#@gFuhrj%MXeV]l(GePRBRk%0\VT"JtXY7A$SnDq+.(6Z\!g/](kUCG"%\A0mT;/?KWi8k]%nHE>oj-G=7G6ZR8Kd$cDf!-RlF6#sc_XBubmo%Q_P!!1$7.uLo09PmoI,VlQ23]BmB#IN0X26EBN'Z!LuMTBS6-5qd-4ISOiE&fYP/9T&1/&K.>dQZsUNE_%;>Vh9G=oamO=E^kQ"O%_a>fcfa"`i\n)t*G#,m4\e.9kZIKO\+cK`:/5qdik8O]WPQHUqL^V-=LgRV2#pt;GSe$M/aIl*V#)]AWm?98p9hr/S>o0stL?/(I%fd&eK?/#b+mVj2"3&UEo%e&fslm%0K^^Q\B*E"(=e=]9A!%s:',kkr$64<kV2`IhO+$.1([BlWAO=+K=^"=(267dV@8!B9fIG1mM%LH6<K!eS(Kg^R5s7/K$_D"9gfb*tG?(BZl8K3,;0ND&9)Ae252&6S'3^hUtBj7d0;8)VJ/e/u@@<qg"jdLSQnLNuFbHjQGncUNsB%<.FB.OQa#dkU79Y'ZY17rXeofa5l48,gaIr>k\GCra6oAUJEG%i848*Ti=+G2i1Li:Eo4[Ie7+EkRn!1FS]hIgP?6):p?$fT%_*W%5f3FV!1bfnN>Id)^?P/EGZAGd9iep,oRUA7p&[I@MP3_M2-;r0)%h$s+/@j&hietS$%$(33q/"mh.qoX,m`,J-9s3hIMk*HT!+\Z%Of*<9E`?ta^3u9p@n\9_NTg[3Tf3SdBH9>k5'](*@%s3GM1/;<U<=a&m,@#eX34ChbU_ro(RDc))_e>IMeK\[VE-@W!tu`&Ifc20%X1gUgm>ApV=(,U,3:oOW/DB!=N@EoYj9":M42!@gQ)n/BaHQ>m#.NVM,_m4rfFoY"N(nl!Pm>(M?K0)EZnnN5PO/6u`k4Bd6O?W9%rZI?E(Ce,NM.Mn)@3GHg5(PMqis!IA[cnI>`ttU@gg7u'V5/Pe;F1#ebL)UW382pP*%fB%!jjZ_Nn4$umoIK\hual*ht5m51?K&Z%2PuJ;.2BWd\<n>(p90'-g'G'82*=A:nm.?#`oh#:PM(:/m6$)?Sa@iUmT#"7:En;pFlHQ.FX>Ohp1t`RlR8oRabDP]#4U3,0;pC=%i'WHjX4ur:6TY444=k+VPBB%X_m*?XC`"KlBKqa+hR/*!Ide$Bg\eOC8<'aE@*$0)4:X0O*PWdWe7`5B]Uc;p+@n#6RUH0@qnRBl%.48(@&)9l%N=G.FMircEb]i$2L,\/VpDtT.pa3:c4Gs_%X8rCHj^Wq>+Z'tTHjl9o*m4U')r'ORJ/,*0N\A@hL3I>89!Ok*oQs@a%9GWX7`GU;"qk-t&WIaHTP(qAiOE6f3oT;%l2"\mV$jg8QZB4b-(],sc3"jO92FnSj=XaSOM(jlb>l_n;(i#(W5Y7n0g1,]R_>oQN%L8N.>1,Kc)+Cf)rd$-Q3Wt<Bg]b"tTiiXQgQD#)AD+m!Og-#U;5lXsLo-T.6%h>N/%k3l:.43(X0:uWE#Df4g:pC`":C\+5c^b=d%/L5?ggtog;a3o`o1'V`L-(_mMN4+`*L:e7oWGfObOk+*Bh&C13)]OV=67e-]3G`?D]97ulT((LU`^3X`695blHj^dB&ZQ6e1,/tJ%jVEk!/ls5Q+-9;9BM`q=J+D8D$g4kieB5h($d=PkS6C&9T7Si^&uj"6cp_ToojnPkQpV[\5tA'/nT3og1[(R="c(3nMpA!eAdaWj%6Pl:ZQUjgtLFtW?cBg+BEXlAs#$iE1R2ig%$p#$W0nC=Uk^"NOB`^;:d2@&3(N,`_]''P`VN223U%8I6LM*!^K!apd)#3SoTUkPF%L(re74e6@!$JaKc?AO^s-#%d;7b40V%>Y:Ln*(!8SIQ<+*ko[=3ZfDW2AD\XZY]I_c'DfcK.Y,_U3QG-+rXZ'H[\A8*Lo,+It$WJ%oF`,,^<N1a6OM.e*8h$Z(fGk+*-t,19U^m[C[P4KZM)61%$s4:6mr>;rNK[ka3nMlk%O*p?o$,K;i=W2h5Hfoa_os+aPe+k>eZ0_%1$6Sq_:pks.qrCsgIS"\?>^("M:gFF:"+Z*#WCdV1JkVHA7OI-/?i9$Qb>I=AY2[<OSK`WB2tgIUI-"HUGq-l_m"&FbFqM)6`$0U%4MJ<SN.Z!EEmS.$UlY=WB7h4[bPc=AfA3)&U=".c5+V2]rh(er&uuS4#Bo!a<[WXDj,6+4+Ej:2lY^BhYoIg2S6"UJBj9E\+!F"/%:o/e,n1^g1(jL8h@]a!\G#/VF&:&Y_kd(J*L</BoQkL-n%%\GFf%<E$170A25/K*SL2"j^<Q9^E_Z6`K.#<RqKa^+9`mI80R+LkD%\,-5t\m$2I4uT,9n\-q9JWZ(@W8B?S?d?tL_AWso-T(Gb;Ph,4:j7,12MMg-Lh#fE\TT3V]oY#o[/AbPgc/#9)HNN],$V6[V*eW7%Vok"/6N&tjiAOJVMVDOm*t42!/Ogi9LB9h(=()Y"U,84MkT`mYdn\oeOkR"aF5!ZbmLRHtV&;X_\NW.)V_O.bU<cfuRSm[J>QE@^%c\Mp3JW]RZ(fDidgVVL]6K-F"LeFnuBm0*)!J?7;-iYfZ(Bo&<>q?[,PSk8u,[W_jVR$`nObjp<5+E=Fb-6feOVnk(*[<*d@S$L)%41<Z]*M5hkT?XeKfQ;*q1>D*1o_;9u5@SkJgc`@PB#E5]EBH#5]*?c;q=1?ui/nW!*V%V*LA/alA.*"a7h$#qf;^JKFgV(Z@6?:g%IXVFDTLesIaZ0>?.i'JPMiu`Wod-'1SP9QR)ipaF[gjaIPIQ%;7Rmm*0f5gFmU.eF*AY$qaB>]7Ng#4+\N"tuS56l+%Ut,E$qqc7%KeA$i$P(=[)_RF20LGFTDS0:t?Cd0tOdX(="%5\#?2,RC1+($LeUsH+k'^\(:ppoUO[TFZ@c7'RPK8NSnLt(#ia_/hNH5$NnG.%>%;:(NPLDqa120M1=J-a[3jhh\%4>m?Qb(g?e&Mu=.E7B7pIl%ksrgR^f>emnFf[tlKiF8;i0S+U2BjKe]^'Wu?"k[9-gH+Oi)0LSW%QS2C"7\JBgOhN&p_fa-^0p-l]&u3kRebJD%aFn"l64RfZ.Pa!W%PP9N1S0@>NN8,&G/he3VlfUGc+u.(K/qXcUdN?Jn'#H0OphH$%nh>bL3YBD"K^S4l_3nUCabW"B-H9-NH"5IbPS:pS6HQJ(E&U*EWD=H<GY`humogAb%@FL97>C?6=45A2A14ng6oa=32mf.FrUf$s%ZpM[3Yqb\Z1P8FiPFLi!XV#3Um.4Xofg&Oub+P%U;K!nEOo"Q1_2M?,CiUDm&)S&A86)S48S"VtVN4cP>D\]/$LNek2l1o,=Jq#b%*)3+%1i,Wrr*uC2P;kP)Nt=k#TrGp6)<$E5CC;Y@A@T'%?m4P*[9+n`-m+pl.NI_`"!`-)P8k_\/o4f?RgM*?h_K@)gi.GuW2XaM%1PhXVs!t'fJR4%eVo"/`a(!b8+@"nj!oNgq&W'<?!/]Z0K_OeBG8!&7%27$sq`+H=_&*YmCs75;q%u0:F2rXKn8Oj)hJDgN3YQ9:%-R*X5Zi'ZIFE0#hP+-keMMVq.G;MQI0FuMJ]eqDRS[n#U0$(EWmbdBjcgpbJ:8XLF/@?QYT/J?\T5#QMaCftW'PFF1/rJE,(RLW9%hocd_g-(.Yo7cc&6hs`OhjQ/qSWL@.-%GK.5dK/7[[`80#s2ZFOXIcc>i2*pmOM'?f[a6br[obTm5?fe$ub9,,;SW,[Fudp=u1E&%p91]2[fI@i/NpaF]N.,$;nQ*,4Y.Cbd@4S-96NBS25sMm$5g<gg?mC^m"Q<ef#'90N5^S]]BO>^*SRJj51hh(knNUH9,YdhhdOWE%:Jo5OZW;=K]4Woa7AkS.nYJuq8!U;RcQg5PHuL+[.IaT?l)O)UeQI3+!WU)UZg02[An'<>$];,/V&+VUjnI2,/k1cBCX$`gLea?/%S`*X<Kp=J:+A`GC1%tc;DZ(J)JCRosmL^1D"?=@nmFh-&W\Meq?dVB#pVgBk&#q<+ShrLR_mNeuG*?1X4`Z*dWf2(aglPjP^-g49%cA$-^;TaN2`4^/=OdF,uM!LPW-$#^N$b?!`AutF9+Uu)"+?%SVKMm-A;B,T6\G5^E*->M9:q1;R$g7e?HABhD)q>HT>W,lL*?`"6%PKKa1b,#J0+(h$Z\fdVQ!54>Z9c'$e2b)ri&DPj2OnL#4e+pf=c`Nd82I0-X"&B1?3h%bCW/i<gLWQD$g8C'Djb0r(Jo^+'4!PE[%V@2t$GgD)56oJ>4Y?b86PKKb\39P%.flTNjFPbZt8S$9R$#R!E'@!B^)Nt,2j70J?K%;T;)G3/PO\HY!IY#mC@qF-^2`:)"i=WB[%_KF$nB%%1mZ&uBWqO>@.e0^_\2_)b#bGGZQYS%VqV@.-hjAo&5RkCXj`5K"HJp'f`@c5;PV@1PCo38EYB@@$\O*Pq=-BV"=PY:2+%0B6]o"TcM^>Ll3Jl!e1D9d#oX.$lRG5/-Or_!QhbRi$[iqo.CsW#.6&`27p$&%J)R?K+n"DF([g8`*Sc1o*\0@\ind,.3>RE#Nu-%XTqF'./EJQpL>TenPGn2'aY5@=jOp:l5rnT<Y4S?\Y8LABLjtk@m<FHI9\`8"]@a.Qj>ZOj&3'.PKR_R"meC%rU>\tJ2$9pc^Z9"%_CrJ>,%iM&RQKsu=7K8\iNKd"k:f,0ljq.Mjt7jA.paE*X>@\fj-/.bG@OD37h6_#DK8C/C[U2,'RpO@h+st>1#eq>34VY8W,(gG%mb9F8^nG'XIJ[c)->:[lSTE=BQros!p=`ZNjO_3k8hdZ\Ks>]E=pM<A0`XGof[8VF\cLCt%*$Tq(=,3r7(RrS^PQ&1L>bE<EO4()%0\/XDa::OBIst(OF2JdPOo>)DVdH-L0)07]Yl,V:=%eTnTn5KIl=+e]:`#=SL:W0Y%5f94q=H0inI<Qe>TA)@KX;A<*-`Yb>W\^;%4HGaqg)64Y8Lm!]*L8-:33nH!2E7s"iWaRU@]auFYs^UUF.:QT3rZ+/fN=h/P_L!Wo4)96XN5?PG(kP=:Nabaar'ld7OSkIXY'Ao%W1hFb8^dZ44>_fhC+.UqihjAFh-c&EEafoUf?MZ1L1+c1o,6kgTu!.XlV$9<'8?EaMFZC&-LD5.cP^ba<SnD-UX%#3:Z@HPnb<A8%3g!jl*F@7/QMM43k._.5VSjatZ#7&bq3Ad?gl4^VI5fr@IW+m52r$i8j5c648Rt"#QR?lRh>m,'I8eujnrglX\/T`pJOb(]jX%mV%BQE;UmKVJ@]$g&b)LTG.gf)HP87a!%>qB5*gj4sP=Bh2B)NY>rLn@dRR=5Wf)8n3q4dh?E8?@77%a&Z2p7*YecEQ0,TJIdbSI$Rm%@OjRf.G>OVgeRXTE,oWOF=(O3)Ulr-q<\1sh=Bukra&h=+N)s=rE@X_DrCrEGgq6\8PDosT<74?@KY)HqD,qIRI/G6KGs9f@g?L8%<-]G+9cYU<l)F'Vh++q)1!qdp&sI[?E'N@aLgGimk+NJVRZX&!S&Q.80eB,%I>T3A;Fh=[,r$.P]26J.`*Ee@j-ma]#X,.1nB?3)%6@3B8fDr6+mZ%a1R/`2d&KSsF<1n;Q'HO&(IUh<u6KHsSj'VQUg`[jp<n?kMNcl4a_NZ_>3@`'L:p6$25HP._a4&84Km%fI:!jZg%bAI,/OXg>]hd%"IQJ+F24mVZ/+eO34'_7Xo%-,!6EP[j=H\]YS9>5c*Y$1MqTR=7;$Brs,,;-Ph><A*Iacd7E]`)paQ@rn"/>Y8%%RPI\4->\D!rcP*]YF3a4Q1AMc/?%#cMVc5tB8QFGr>g%*h.g!Ue=.c8m]8!a,i==UU-%E/j)@.,pMY@$1c;DkqlL&Li;pk&J2c&o%Uc[aeBm@AHot3)oO37CtdQB]qJ*p\8nhRT$\\m^QCKRLbTMG<rDpIn+D('q"ddd9R8>jb)kOLrhVe;f(8KuIldUWG&T3)`g>2STM%f38cfa'u/rh[bLI=u7!jBg!di&$5i.P7qiE=7<cu.FM#)'-ut>_BtW6l#OLBbiY@6j2[m)o6o#uYFrl(OG'MWIE*?@c%(Tee52hm%@>R_"a!ML(F^GOdXRc3q@sF/3kPZQ;0pXHUAsW>RE1p8D$"3ar-V)KT)\f!fia?9T;q$MlUW3!ALC)WR1aF_h#1-"ZTZ<,A,6$Z%%<5<H;nW<AU&Z<$(a3u+LlXa/^B&DbDh26;]AoK(u4EgC"MS"9SiI`H>`_GOD\.YtDKX-^]9,#t>JZ1ekmiQm-:#Oer=S&1;lQOT^%*mq=\Nu]fHiXf;;!K<L$2UH3T`knLXiqUQA5pO]Ze"8L%R6HS$F'K4HXS!oO,KFa.a)hNP6Y#9BDF0lZlTDsD$:!l,aCRja(3Q_f%3>o[I5d3?Fe-3TN&o*9<mR@K&i=a8&mbg0*@OI=%qTh/5X#kE`eKEtuj,N.flHasJhlMR(EtC\XQ\X',V_gjmTU4O@VK2OY\I)+9%*,GL8Go$"@f;fQPL?l3BmZ5n#-H<R.fsMEO%D;U_(l/X6h^ACK[7N\YT-V@6d)Pq1L&88F5qf!D!QN@boLF"aO<>=Vo]2obKJbJ<%m5S,V+Kk_-=b-ME$d/R8,#h(R!fYF`kh?mm0al?`.\RViIiN:W$B9,%*ei7F=b*(iM9#_abHVBXa#H$C8N-,F=b,Huo(kt+qiu7c%IC&KY:IAL32q3h',@AUV]e/Q"lVbG>YJT?RjVrRlgE\E5UGh]@ADe/J.3I57*:=$D&ME/Qo"n-#;SL6LOXG<$?ekN/a1.A[j&Nl\%*?#G3K0$Q#Po:W_X5>2JL;J<9-BcJ.Z*U.D]@Y@j21K)a#gp)3p\I=*K`Z:r7_73tLR#SXrC/phb($U%Zr\[*&g-[N^Q91>\,(fL%%5mLcI^(SPm!J]*,=<a&eQDSB`Q7,/^qG1RP:OkJlcPPKn+DU1>6"PdUYY5PIB26r2h2%dlPD^Xi!@lln+@&nVW^t'8%@/(3oV^O%/8-\YihdfO-6Gf_hcTXL712/^b;4]rrM"6')tF-3d!P_c:#1mZkb7J<$]:Ac\,))4+5[3AhW*MZ(YoF$r<_9F(VQLd7<FT5Y?uD2%Cd:JT8GDraDlE/0rHu(1N-qg9Ii+]'WumC$)EBs7h<Pm%bS!+m2<ql(Jbq:,$:1einaH./%_24EUlKo-T-o,hmoI3;F08!Ff.S%m%r'n,7n+DU7[4B2V8_iVJ]fS?pI=,Opio.S3Du@8'i*6/7cfPMIf.VH.3'>o<\9n1K20kY^55r6EdC8sH-7`q0Hq#;;R="n,pRD+Y%"Jai>(O`@A)#*P0&Yp"]+5b_+l+"5!:#nLPJ[TZZdi8/Poc*$C4s,Otmp<cCA.-_cIW!0PR.pHfkS8?Ch^DWA_lGek3&]j2ISjk*%_`-6F'=l_5&p^[5n+DU*pH%`UIVpYjmm\Dd?GGH.Xoe%a)a,(q^"(GM5I.r&1j%#Ae?+03Vjn3=Y?qPW@qn9$'H?RK^Z[q\5+g8Z%p\KT?`u0LP(-gtrD'9s#Nd\+gE-C?Ap\K.P=5U-/j$XF#p\I<g6mALlGL4$Pd>FX0P;q^<IaJJ,66_J7Y@$q(IKB;t8GDsL.7$pg%RDcdfEHRZ=me-1SV#OK1aR%V(me)JR%Kj!rA)HSg/KC.TKNj`+54NT*6k#L+L&Ql=hmlY]D"]YPjhBg0-+fP<j;]1bmnI$YnM+P8%gq.nhk99_V0A5GU(peQ4#Y>]f.8Z&km.Np\@7Jo!_Ymq^C,IesPh$AOZb4^pVqoob\Z)G"p/tub[5Or?*18h9>4-e)B:?NVr*Ipq%/oBLlrg]S6mk.Asb3,2W]16XRp>T\]R/1W(*6qVM>-!LEF`I3TA:M<7^@-IK55mO??=^C_%t!3c(M`9omGd0-<kmA5*;-J,Fr(sd%SdNZ!J*tNF-XWdplYioeT0(kPl=+29h:?5:VOQ+J-Deq8X=sQ8I(<S//fuZ]IF!?_,429H`HHTTm<!+-fC%%NQ9V?%YJ1o98m0j(%;Tb=bAS$(_H*$A(*.P?M[I)Lfmpg.I1V[u.N"_gmR?h(7V<(G7p`>c4MPRp7V/,t-h0K#TK2d+o%:i"G>tBG/<i91"=jA%R2fkHA%iX/5&O5PEbq`G]tFk+"s\=*Ra\\6IrNi-cT&!hk18nZlTSXs,U9AQ2b3pZHdlL\Q[a8GCarCnLuG@W;;ae>q4&#E;'E:+70`H&LF%?/AqZC=dn8-=[,?3J`ub[[3Qm1AUiCeNLWH<%"'J2(tgRUlPq>D0nGILssk4dS9`<H7.0I.P>@nk=iUcmHm0ld>sj-X39PYT(Vu*%3GWMMQa=$]YD$=JB(j;>[J\j$M39aL<S?*>=hmf@bJf`GYIq*K^TWqEf/=8@6EQDJEH)nnQd>-%P.CNreXlJ@=-QD?HPL,i/4N%/%inGS02k-H9p=48R1s:1AbWIV7P`0<-P-4kjSL/_i>:*_!WD2R5:p<=@R>2QY/*)mX]<Un<r3U]uTY*GU]^MpD::4Nc#P(,]Pf@Y9%_34_hOEu'l@-"QakXp8G+/S'(n!e7`"%@O?3kPF.*ulqsRB!lSdhT?.R8cqWB_C3%oS`T[<GH0U[AI>7L5?')=M]Ze06PT%eF9M.%gO=TF\S[rjdjiZq'i4'R>F"9m/0N+;h@F[nVNkJh!k*0IOCR>$Qb=('Pr8I0o3N_TMNYM#05$:t5';*r\O)m&Mq4=)QHM,R79Q.'%'WlhH.]m4t+*Z;$lWG)OGrd:[0R_NQcg$0q1VQ<lPA+'[RT2."SW2a3osV8NAK9n"?`sje(<^KO5;/lN-K!Wp\Zb.(-[0NNo33?+%[b,s*j?U4X&PK#:pGPkr]V0SQ'n>YPPQ6Ro-RSWlQs?_"Brn[cs%(4;.kOenaJZ,ErcOY/<,W_O$*2gl?f+TFrj&6aV2H2*QN''>%Vq.naW<W=tkO\1bX]?ilnN*[%r-Aj[J$c<7k:SDd#G`k`B45TITlunU0-'=jWHk3)4jTCbS'([*]6<q:hn*WN;drd3\TGAqDU7aX%3r=or>PcZ?\aXd8mVH\m82QK#XhT:\50JY<hKM`pS3>2((4UM#k#'\5gNUB'\pVcS?[LVGLUD*4ZdsG-Uu9eg?*dY824oMmHD1X3%3$T6tQ#F^8@Ot1#mbH=O`j()8p3I&[fAb:rdFl<25Od8_4ocOIC?<'MJrcQIVnZ!/*8U$W/UbsPOe^Tg$,_o+Vom4\<ljLrW'TAK%4E--0m/6"b&lr-Y\^#m,iJ"!5C.a-[hNTLSB2pHXLbX5aKJ_*3_8EGLQ=s?E1mM*H]jCuh\%,BhBh&Xs>pXe+PSMV["l1p8fKGlT%Q(k?:bF.;H$ZfZ@4o(%^Za`Y$a_Vh&TO?W-#.Lh@`gHVR)O\SHYklsu1157dE#C[[_((o^o#"/ka$s!YlK,Cbn@qe6X68ftNO#04%io1MQ6hZmZo@r)(`mm4=`T_DUA**BY<;G>O\W8"T[aXZ0kDT/Rl`351b[_g<`KeVl8hWE2pP7b_Y63<]J#SqRp]#W-A=Xl3[?FC[%$1O4am/pTd)%DFuh9>d?=tR:j>,b8d)53I[1;$-PN$o0\'#eI0=]Qk@'-#[B;A8p<.qro8+'VfB9,P?jhF5EQb*.o_Q,OUhF*d2]%hl4/Yg(-btTSF%oS;8N;qO?\?9h`h!c0`UeAmE]H$4n(?ZE5*^Qo4B;Ko!7JN1\Oo'L-0a1([Y?(Eg)s$Z/N+b!Ps&"F31DEfA"V%ITj[e7S&D!8>I#mB?qZMYo11QK-X8*B+q#+5]]($&!Z!%jPh1DQsg>6rT`%1\c]e=Fic9X\=21/YOqIZ/#'DEY(u4ig?cS3R]-*f%9,(jHIIbL?6I:$.Fuh5#%meJpNP3^/8>dmf8O0e(ld+R"DukX2_U$h(%YF>Q#6`&U$\CkM!r#Y'mJY64_G;$T^@P%0>Mi,(%g>71%j&ggs^TX\um-UKDk>J5+^"e$$#QR.oi;W+C1K1"jB]njJBtt,_;0Y?Xm0I1qV?@r6)4gXb(Bh4@Gedd8>W=p#Ti-+K4RaMg!P8,i%9jBWt*5c'?G^@E'#X!]Vn/050n"EH<[E"fWF,)S;+ZA%2Wnk0pi:PIL`5btN"V&tZ6j"-4__uL\h=+9c1i:-8r7$.@f,UfIrWXEI%j)UO9-U3fPJJ"KEOfd*qp>@9H7Y.l!$!L)cQ1AZ@bt:]H(VZB1-9bl`Q#@'n*bOa1ZSrqBS2R93iIJ9W8*I@YGnYC/U'YE"kjCmB%GPC$)cJ=*]0r=e`c[5EYP933p&0u!kGL(`@,G,D[YDI!"Jj^c](WYr-!`:4,\__`=+pcC=r\PP,&]rSBZ+K_ZR+(7nLQ4[;YpbM0%3AWI)$sMg[1b^e:rGge]aNr0eO=FuRcdhLJ0q`oN)?htf0`k6u)YiYi&pYa[Ir9?50'CZa7j@gJfCS`m>c5OLe*cob3RLLj.8f24%WHNJ*U,0AmhkT8RWm#oT:l!0jjrJSoi"cOegT<6#eU6T==4c'32t(@SP.o?)!i("^CD7F$H%gYuUko8GG$iEDQ`b9$E&8+%p2qn3%NEKaW=JtAjp=Qq8&b0Z-#<OHqJMt8k\A]Q2VQTWnpUJ*_*%Gt^nc3jbLi[W7mMX5T!B[jTh=@Rj!!'Y5>hhKd0MfUSM1Q4kAMCF)%\qjk.<uSLVk'EknAPJ[1QEejFr3AVP38Is'<bH?-)0Vp5Bi5*q\-;SMHENo%YJRJEr-D!Te[I1NBc<U+X"DVo(V,$7T<'@2;GbtJ%VfsM&dYj]@FD&;`\G0,"Yf\?h\hiBf[P[NMJ1XKbo%u;)m@7h/Bns0<V2/0RX3J%=mV6Y<G9U&^YRapJb?X'3;*1i?n!>)`F785!%k'B"0(R9Hm/,=Q@d%[8IcDA@)GWmK=m1ha4LTL(S3P"7?3362791[8+eG!q:l420Q@imomFuHFuG0\C)Uo6qiIR!Lj].C\6_YpR>%05juDS\2MCpIZEOjQk+FnWmI.]:UD>A$homj;NA<hrTi\?#s;((HtXQg@>&dXml=PrO'8DFg`jBeS2.!Sc!,?raTSNgIN(&F,LRG%TpJ=?$/[A$95<5<q>OBs=>Oa%(T!I`NRchGO5;VoS#,cb[Ah^.nj7D33d:.>:s,uEYHJQ-U;sK>3,G-J"?cWSm)h]McXnTNDr*(-%)$#2.A1qDK;uB(B<N1A@Z$t:/4>7PtnUR.gWTuUjk)$d0Vjm[b@T;OI,4u#Mc$tq\nE[5K[jJKXSZ,t4?_NQf+Xba#"j>D5]4i1h%=Bep4-6&'Cm!@ndE2G=^c1-?M:55GMY?1'mLFmjM@QfrR[l0TKO:PBZQgIDa\JtUE['032^HZeCJ4Nbrmf!U`*Q<Ci^_"*[<SgHk%Ip5/fmjI=G>B8n^k@?d;.$\IY$f.A]cIGF!q;_1]oUMo)jm,!N*UE*WIp_)M_Wj(O/&07ro;@oQba%USebO(h<dJJWR&Q>:gh"=3%!=ZA$A8J\fK$"&G9%^^eVp2#S)ERf<SG2=!p.;mi?>Cff''kBJDI6DI)R%D+]3;nLrjuBN^@].>NG`bgRE8_K!%6$#oqhIf9p/F\%bhoki32$K#(kEa:e[gdMn`>[Ig"jufRIeZqnP-RKP5#7oVMk<--@15/LIR?o`mj#<cg90(7h$O<IS3HgpXUtD+'b=><K8nfM4klN%PgfQ;^4't$r[p.s)dRa^D9np<Z*jCt>A5,XfK%#r[[b$jRrl4:e$q$<++>^#<*Z_]8arF'bPa+6]!G'X[.LES6]^r]TA-?1lc0VH%roSB=@C7lX]"Q_CbC'`(SpQu2XOXeW<Z>Z^;p-iY/8>6k,sC/1)GSf'Q1W;P4JJp</*R4u)b&>uQ1WGH(pZ?.Uj"UX7[!Fa,sCR*%OGr=NF5!!G^.jdA_(n6;)SO*tq&^m\!L"l^s+@+s+uO*1+!gduWCb;5+R,Lh9j7P>&O72bK,]->AP3/a)Z\j:-\M[hoS#Ms`WghE%pp$%I['iO77'TfR4X&bpYkl'6#WKVP"[Gn=oAba+-&e1*,F.L8A@\%PQ0WA(Lm9eP]`j8W+X0e;Ipf#.<#:W=;&!r#[;4Jh2"mUu%I:85G0tQtGm7!L+X5p3nN2ZT`]X;e9k5'bE5rV?lY1E#(B>obdn@-H/#BuANcJ9EmW%7H]):TK=jT('P(R:\HAJb)j_3"A!KNeV3%c3q]P5*7=7F)U0fY"J3qY'T*fL[O;r%FB+Y[^`nq[GWb#`&aA?<IS<"m]8@^IK0D]["u0,356OqG;gTnq6O%Wk^hFHg\dXL?9$"h%'Rq[icbbcn*Y&[]&M[_iJC?l1[Y!MNdu_Z&g!ZW5[@,TKPrI/uS-+h5L6PGU(L2GgkHqE!@qdl=m,bt6hTTSQWINZAoginiBFEKT%?&loL-^dc,o!:dA`62Cm'D[U:KNc+G<<\(2[YD@'m_WLL>?<,V%>8Kb<eBVm]_)&iPS3(>;`e\EMeEEk!"6jYjbc<a[a-*`3'WD>%,!1MV,lX@(V$c+c,H>e*Q5pU.Dp+/cJq>rK!qrZ16hdXUGH8YrDX*Ul/YE:XJfT9mEuDf4Z7ek$?t9BOE'0c@Q<jL`DKWb/jn@D@%K7dP\jTWIMb?9_Z]T(XNgDoS1MV`""?9@Nag:*$p]#DICH+s1!p03/G.C+dpeHNYuK,Pjk2Zts'DY]7C6sp,hIR6d?M:D#/_31jR%(dfLtf*"YR).slK2B<<21Pj#B#)PMbFq!q:2G2??=@`U9<XEL`Obt/W!"sQ#Pe*W(RrNlcG?c,m$._AM]/1Ra_8sd\^a<N""QoM"%0!>\"668K9.'M.NkiG4dmuM@JRs;;15Us<qpWX,-O<1fd<^@T/#;o4V5GX.dfmT,Bd@&kIb:gIdSRB[`[o@9)s1QM=Q2deW*l]o4%p>FTkiH.&:`0h@=Ic4O%i)jM'O6L$TM2CEBbO2ts!(@*OTsZcY6&9oFC1;+)-SlOKm]Dci2[Y&AC$\uXC5amg37^$Gm;m-[(tr13%eSS^?kbbOAU^!D4;bKG$Ns(=&pZ:MHA"`ChIhXJW/>Q0NB'iTL&YTgtC,K<u2q(+tAL16'`q<dU18Ae/&g.L8.G38;5']l$mPKuH%6!aJsnS4f17rJ#@2-b(@PAlm?Dk5J./..^>s6c9!l8n'q/T%BJq'U<9fO??=b`sIl`FsgkRl'CP1t_[`$%V+jQ8>\1?Ok3`EVea"%Vi,T^1.jPcIf<_XIck\'NQaVK,P+'qDFT*%.Yu:Ne^Fo1<-2gqb@q3sqqSQ2it_C+]AZ62+/at#KBtmtehYT4,36"$[fh6>nE\bj%-Z9#V!+C5op'h!@f9k6qEn$m^[t%e@&SDuI%^<X-?oqlC^78JkB(:JQN>^a/_!B*?mf)+DJS9*R!Cg;KhH>'9mH=:kqL'f:qXSf3%4P6:;#dC-5hErQa;k2Vkr4V[@A6NO2SK2U*r;c&XHTGBerUnWbcX$0TCSdZ,VjMRGW=&Qg4hZ'#3_-AH6OrnK[TukC=_1J1B*DfV%2hYC5`4pl3T7<QrGb]:<d1(q6DrN.8IBmn\o"pmFgY'qLbJ^ScH@#Ti/%qJ((Pu'X;6rdCI/PSmN,H@Vr;)XKm5/0BV=N-ag*8'!%C%dQGF3TaZ^->*cK=b:TmU-@M$IkX>B)2VcO(&p*8%*f`L(A:p,uX\Z^7S0b=kTCiT6)0a$ai3"VRXAODbmJdbd0E`K=cHgmEY^T%s65!_m-FN,/dF'+&[ca/G?-bN'i+j>o_GUE6hlPZDf@F,l!Pt'bd0iN$HggEirZ]^bC&X7Z(khnVph'fo][@gS1>!3%WS?l.*Ec7%0KD(Cj;h*!S==^*FS?%=)1*lCLB68A7P*4;V_%;pToj%%6BA,P*h9L%$,*#M\.V<\3U+<mP,X,(P5Z^Q]'EEg[@$u4CM/@thIn+_%ep`?ipC[5\bteC`OiQLSW+'+b&e/uAmqscJq&M,HGl4uD7fFrWV979__nED"h"f]O]D/g\ImWjr\!?O4i^u93\T$E@rP@C%bNl3_%S?d-XTW$"=X0cpCQ74st54A&bqZ)&=VZl:fo7+1]l\Q>Dof\QYYOXka,*dbCMe]`Q_@#F(^A;/O**3&>gBf`/s&7i?r2Z5tda$kP%8lCFoLX1g2r9*tC@e-ac83LO)m;B3&d]GAGQ1j+r)A_-M*FA+LPA<`jEBUi4UJRPT.[2UGVW&8Jlm\VRF7AYl?\uZ_*=%O\N+-pP%Ui@D5hj^mj74Sih<tDko_T*>bX/&H/HVZ.qEoAj!I!Ka;8nqKl=]g@:IjYpg3-asHI/*dbr]nlGP",!jH2gN/^1*Sp#s7IK*Qulo%X,`TB3sN(g71/^(2N*8Yg=-iXAnIhr/SegXP'4,8bh$j_VP?^/0+$C\d[C:2V/!H(er?bg7<[BaN%?F#g,9^LB%g,HX1"SM*=ZA`%<G9=tTEcc[WJZ6qB%i!mfabZ/OA8pb]I8NSCLsh+C'/6SG1t"UC,01g08[0V;@gQ>9K3B>9SWpe@D]%El2UuXe^B1h>#M&hWG)OP%!CcK3lTg;t[Op<i&joCJRURWP$(+.BWrbnpAp$8==r)B\[2&$nKc)rV^8[n/>VMnR!lN8d3$LkH@4I.eF+KISn>6]2:_XnZ@Ad,C%0p7Q*5bGPI#(T`3%=AbBBWDo_BE/TC'0<A)Zt5_/A=@44=0Y;OSlF.NK$\]1<QftciG)n',n7YD*aj.,X:5l[r%q-UPLpZh#0t[Q%%3=Vg,LX]8i0.ciHWJjPl3JI>Ad:tZ.nm1c/\rK:Q<=82\!jEb;:`N,(p!oT[rj+(8L5B,WME$4UhcMYe[/arD=XQ<)Is!k(qsI*%MI>O>'@B2t"N\KqCsm;W0EL+8VKL-\P?A(OD]ld)75"rMMQIh<@9/(Zj!&&7"40n&U_:!*:6rQ6bB+jNc-`555ScM@k[OU!i7\0f%!0V')1a/5tecIBF6fh7e^-Rue'L%6TUX(EG#.@b>SO3A'Lb@9]*/)'d!?FF53)25E!!E]NMc<eQ%E;UCA.>2;bJNs\S<iTq8HbZ^%kR9r%&[FkaXm(iu8t\tQCU3*8NWn30c`34K%)[\UgH%iJ?3K`MfsII%`T6\3,H\b7&OM!Z@*H\\0G2@!dhILlTXp!QJGr5/_jZiK%XfO,kWQ7"TK=pIb.R609N&(id?mn(ASh)Q=)^_.6du&umbtHt`i$oGJ]M)<:,HRt'G>Ag'i_)TjeH#>\KG(LE`PKXu2<_gp!H'rR%)_ZeLJaQ4POK/Da_9d0.oIRs*Urb0A,VOa.FYg/QRTu619OPMDM4lfDXdgqMU1'Nh&^Ujb`).LM4lG\,6P'h)KoOk!=HmMB,Jk2)%JYrP6>/8<$-S&7#4p7os92e*1"N&=RbgZZ^:c-phlfgYg$H3S7C,Sn^"#t,WHA`tl'ipj,WETmh>h*seScY"_RO,U;9GP&J@_F6+%!aYoYgPi6P5W'[h!-!rtJFX%\#`)Na"Uh85WnaK]j&%AJnb-Z>0kUs+T'jBLkQK(/^iJAWY]M"d:h7+*n1#P90Nbm4E_qLR#lnfD%;'df!(t2k+23?0l&s`t?eMYo,oPR#ZTJ<!2'Y(NH6=1K>Wp3E&d*at4,((+bLhROfK`t=F#F9tO!5\r:PQdjV=FcF+/8G85=9(ct%A;KbPVO0%g!4?^-BnMd/FQ`nK%a6fR=K/;CA1bS\pnUgUUmiJTX=PJ2+^(HZeM<ct(lCW?/kAdWac^WFeS7,P5qLN-"^cq>3<j1j%!s&TV@0(QuEg63q.k5tt7Wq-Y3&!q^/P-o/`M-!,\dU]T+omusQ\6*iOoV$l(?sAO#Ao"VTh.#W`oYWJh'6-??ugEkO_'W6&kg>%%jE"9(,NlA2FZ<82]P7HP"ApT!"(fMnFGn:T&C,f,!_Kp6.KJTt?SHCZ=%rc3#=p1Y;&KT\:f0Nii2iOcTrOr@hFX+SY6P+;AtW)-%WgTgB3E]lh[`#GE;c*ghTrPp;OWI5^o7*cJodaLMVP2kI.Y*5gUc#`$)?:\?1_kfSn:n_O7q@/_""Z"=qCGQ+$kq2g"Ut]US^9&D%6b]WHbLO6_OmZ%e-"F/F)tfMJNaN_7H!?LO8;"@%IA?X*a:ZQo>K_?8!8q"F^+9V"3gOZW4Q2e5i2bn*!E6<-[YdgA"D&-H'7UJn%bbEE`^irb+jYDi!7/j]m5h:gfi109WWk*4'"?jU`[N]c[1/oC)XQlbj\-=^E!JH8P=<L"'_O<d_32VRL!(oOZ>))GG'!MaLZSYI9%5kUFM&-4'W!a>fP789G'/PG18N5>]X"_F>2:mD,".?"C:L;1Nh-tT[b!D7o\AJ1sJMB/C>^bW\r6aNRDHlLpn;&S5Z)V(W0LoUaF%,#j&(Ab\/38k_`s.fpPR?ZY9CQcbD$iN2N[W>)aW5\4U?A/sQ)TK5HhpbLiaJpK7,,*OpPHJm@Q_"[rYf;M_=Gd.ZF?A@ABWm>97%Db[JjfJK<MPejTfpfJ-B9J&EN;\9a/_r/14-]$AMa@PB*F:c=uN"\Ge"+^,7$8l9A![e)G6e_a'?=No,nHetE>!0SV/1^hd#eU=@%!Za]<OpVt.5_u'oR%Ul2`M%__C:agA!*"r^9E`+)==\,,@'U@0#MB4M-(V+a.0?/W!"B2#+GUc$-r857Jh@IHA70&C#W[R#)+9b6%;R7`YV?h]'8/J-=@)TFOTe.l5Js*#DRfV#!@MWTV5]@[03\E:pgdDau,HGh#jOOEYCT9e-")_tMg)q+B;j3T%;AkqOYZ;69qnPl2%YLB0u<3^tMK6\rQ3j`0tV;=Is&R[+`!JD$3^]LBj&5WY)(H_t:<EBGCTG/Y974qmR+Ab$LCEVF],=#Pd+oS1mJHd4To/7CB>RlpG%9TpmBd#O"G/hgD7JQ,k5T#ecFZ;FAr,PSDN&,-dukoVp*10c+Vi!'tESoIVDZs^YA&3(RX.B<_G)tDK7:dHJ[53U`d5o(mN-Dj_.%!3o`o?,9WhPBo2r6t!T6&)>EmV+:tp3o_FJGp.\>[1$#WW/EhSOEb<e(+SO.DU;J$k(6>[<7"e>Wb%A1OboIDojUdn'T4N-g.`[m%'[WR+e3R'.joEl;LrBNU-"W\K5+=1!,od=Yf7^8/kk^sp.$D/Z,#9oo0SFV+EiUGTR*[pnNNsrjD3Ij0Tb0(RE7b;-`,#Yi"'HlZ%XN*FITX>?r";48kC0%7X,GLK3YG`8kKV95sKT(b:-Xo%q(?k0%.&SDjOd`7\-)^j+'O2I>s'd+[:hS#3<0:N*2F84I3\VT&.5V!t%dk'e6KKH_s"00YHA-P*a;pbBG&h!`JgL<W)^?NF'9nnIX/gXsO!Ff3a,lkr(#VY+)0Nt+a6R>JJ^^;:OJC0"V-333cD4uJ]#YcF'%7,7mp'I4BCS>[dYMRH4.^CZ<24N'l.JFuGD4`n;5Pn"6HKW5(O';:,ENr4TeHiqV%PdX!'"$I93R])M+=ems]Rdb%A5g(-e)JR`!%-m'h5)ScQR($IdD*$m0L_cADMI1uG>QGRGpQ1X*MPdd`G,mE>NinN[f1XHqG+J5l4dP[aIP*#c+#iQ4H(BB/?p5NLS;<]4dkaQYp%<Eo\2Y-!hh!R*5)Wnmf8ZdBP/91e;W\IIVV%Nc35da4D[0mW+$.b)@+<&>Og`)T/^WLZ=S3?T(HbKuHq-c7*f2'!D:m`l?]M1U1%%\Hl_sV,8AHKnKPt#RBuHgBrKJXA>.`$B3ik83L9K3425?(/IBeXYN/ldUC_`10!&.p*'hU(JuuD16Z`*)1_[YQDBRofT+<DgAl(n%,(2$-AJ1if8>RMa\`@_p`+qoNG345sX(.To-9arGWI]_ZQiojVi#*".VJ8.cp:(jn7>-[Aj:@h;PNcCkfaB)P%1O/b-9C:G(50j?%eso/<-Au")DV5E:4gmVMVM3k_g[QJ=-ppqjU'iDBd7%]9ppOTcQ!/oF+2F;k">4,VX'7r#0l<1J%$6s3+ZWF<1)e#4=2Flg;-CuJ%!/;7adk*mXUf&F5WX$D%^`&)\oq@'f'qo)eg,H_q$;n,tVZ\_3!/jMR'M9CF";NPI83aT-7Y,6:8lXT'nRDYZXi-+$8!#k@C)E\:%%>,cU8/$tgKD9DILYG_K$ZWikS.W/ZLY:<?'Hn!n]gX&UZn-XS/OWK(?O$5'&1fM4gnVk>'`eh'd8,Wp,#N%$D&Y%SD,Pt/X\.DB%RVBo5pnj$/N\/ibGtS:n.WA]r>0nHFLY5O8!OBLr;1aAU!A^+'=$aOFb+^eH!l+q.X5d6=Kg#icb)7J9p`Rj4[\k2;D=f;fY+i'"%:R$dI,?QDt\oA_5-A+*J1il@_KE7m3@M*R/8lqu&c=H'lV4^+hi6m8Q,^qKV*D^?=8k#t5!"P8E;68,2gFGp=/ZPmUL.ZZOd)cN9%.k.d',ITj6f<J.H"0p1lM\=1+YJNQOnV#U?Z)+,rTPVk,Lk^H&-i.>WAQ1Vi!KaCf0u.GB5R/Q^0MkbT[DD902,Fjg;k(A-&R*,_%[Xaa<We!Sm/_jKmMEkHF..'Z]^_*n,nt]q-oGV2U\L"2/!GP@CFj!%N;TO2#)a4ffnIJ`f:3C4u!M^\N1mp`Pk0>e\dl'`'i.h41%2YV)N\h1sfh@nC#e-uH$n7p5>U&0`D]+)j<m5AK6/ANqB]!OcPG*)jJQCt_Ur5OQ:Lq0PppsL9CZ.<%QcU5u?6q3+PJM"QEh!BlF%BH<OtB4`[<G<)6K>h'KERSU%)=EE*V21b4MQ&P+=i31-E^)1i!\o$@PKY_neUU#E*:SQWe_A)of[.W%+L)%=ge%gLf:Y,l,Q$*Ob%fFD7_550^aK6Q)/"`-Z0elAm(cLX;*G91ft^6cMuHqsP#d>Vam_C^*RO7FJqW*)eT^)!gC+mTET,0+Y,6JTrl,2@IueX[i^c]]Z5%JD5B5(=TI695ZkZVbHB.'1!RnX3Wu%EYM;"/'\.L_VJ7(64Iceg-&`7.BM%N>Cp]6dG"*=",lCHF=paLEKo7gEMoiX8=7tE/:+1[%r6?[Fq?FC3du;iO!jVB(fD0qV%aK:.X97MlO'>e="a7n\);&tu,r0NI>'fg,&1:q@kj`2#b?VZ3..X*Vmgs\*3*/5SNUb3VKAj>L%V`@lo=3Q;Wn3^[:a.lZ/[rJ@/.8uqbRlJ/V&1bEM&AN<K%dENH=mKXSg(0OlOjh_g(QTU]/sUpYm9&:Z*UB?qSC\%W[$A-qd<:a)%:`FNJY%'s&g[]Hd&**/UrU7U'9&DQPng]:loiAkTH9[6$/fY__XkM8fjpK5PH#F$O,hUCGpZ\o7*`1ULf'BZE_^d'^6LC[$B6c'[%UE'`YEMsE&ep@rh.8]>'*NBLUg^Z05EX-lda,:I("7tU+joY)%-+j62Y$Ifn&8pB)%]9ZQ#0'.N+9?%D@`D]Cfm'n*f3WT2-*L/B%l&M5Gr^XE7(qJ8NEB!TR!gO@^@/CN$Tb5a#jK7OL9n$q*"kl`iEBJ/K`8B9+:*rZBE)*j\'.5@YCU85n=Bo=c^paA2!t.WM\5n5&%k@oM$Gd.kA^GBQdIGPYm]B/6<k%5%-Ha;ffb>f]Z`R^%3Ys-mL`QYq(5rkg]Y_!(r0A?]G5<tle^(t'L!QYVU%rp6h/tc8J*of<M%XXl$\XP::ihp"'h'SP6qkdL<8q/5IBCnM6TcCa.PJ&/I:?u=6"D]c>.W(_etS[Nr,a6IKhTXIWH;EM)nhmsij.XGS=4O1`dH_k=R%DWT(QPG*-L1$Rb@qNKea1Y_(l(@?8t^2Yl%f2<`i(N$NmLFhiDIY&j7JXugoik$!\T5GtW]pIUQVORGp>ELhsp01b&Df#<s2o7Im%$>eTnZmu2A3f7`H"E1eGG_Z&\o@8.qogu<;Q_Q%76Oq*7JJRcg?s@FNJBuV:_DlK.<qd=+-17`7^l=iPe@Tio+)URTR]'\3@UnXr%h_k[enp@_ON*jp04Ao?8&Ba_"?apR8-\c'?`ig%e,FB4PS2_/G4pSMoqfWs3'Gp.-HXk,71X"3["\D8$U:,``9r6OI"i;Ek+%?EX%4-bA7Oeo@e^4+aB=B'J`4,OkgNcP!m<4IEb[Q#'s2`Bk;?1<Ihr3GSJ31q/0Y*f=tE`1n-T>ru.@JTqmOUT4j/eCZ4LE[d(gYjp7%l'e`X^#Mt`[e$"13!CRdJ`le"k/(HPL84V?Zt3&F9G/O7IfBBY\;IR``hB=U(bhGSHATlYnk529>_=qVC1#eX!jQri&CJ[^G&8J7%3J=]#CfbtG6m-*K"\_D&^bCPNX$cm5dI.Rc??Y^dfYc:5GF!Dn`1Kg/1tVC$[<6K;i_mVIHOdO;-i===8K6iAG46/C@R@Ls[Yr+u%Ztnh!m4kr99`WM:=h$97@fKE^3u`G5;d=6L0eV::M9']6$-=Xnkham5ntMYER5]:^hI_JY=M@IaCh>`$P3lZ;D.aaHM=dQ#k$h_g%7G<$f2*-"EG&a7fZcpl)o</7D:?!fCO3r^2lc-f]BgA/&JKVOAmahS_!3L\'NJZ*?E.X=9&AoLnG<=4u-uRAQTahaF/Ka<U2iGOg%X;Y0pn86a`Dq,Vp9gR_@O4aW:R:j>OKc$T$6'1h_Vg!ra."/R(ODmj^fR(;86N+(b1dUmJX`qq<p=MCJ>rtG:FZ`s<b89JGqtdID%cZD^6hr"3X[g3Ds&^W7oG/QP'R.//G;Q,"/D)$g5W5D&<(X]5eE<8.lct;-hJ(h`^1R3LZU4IGE'6GH_4l3UlY\uIIZEi#3b=l^*%\5YQF?D<>H'J`iuDa`3SA(*$aT5aH:AO#6S\X4*OU7_ZNeib/>8k0#j#2"B9dgGgF"u/p'5.NT*JN,c>0WCA-A(?E_ou?R[fU@'=%Fp1`=RHG(4S]B\(dS%](5ViIX`WNQD=Y6u2KB)U'/l,[Rihl4C[*XeU"CWp*aGsJe75uGcEJM*r"l*q-"1=!1/I2Ch])XV>ktDT]%H*UOudp)4YLAKHWK6M!uUkTC5]lF1sf7MESSbWuPD?_acCp71Y!eNEP#EeNmpLQU,3,m;1ohdg'VO$s@^&A%*T\8,jZ.aS%PdV#+%%\T;GrQ][-\i4\Ff!jTXLCa!.5U2/>G,TRp'K6a>^3Zc\<X7,<#2qFRb-gQXfgYUcNAD?PM&X+Mn7BG.YWT+$HYfeX5PXB87M)mB%1En")I^;mn[)dFc-Y:>iCW,M+]+]\@\%-HX^>@"cY3f!SYBf'728]N7(@%Rog`ac%D(/EA1#'r,@Q1F/MmGHXAKq,1)gGEi'r'b<%8,KjUCmlN[dto!3gZ=N7JY;4#]=IJ=`lA\3'#m=l%V99lI5;6mil@#`)6MU&1j^6+lo,pK$%fT[k?d$E5!2qWd0*o_e:cD0R<A?Q%%4!)\9Y82f4PH?IUd@>&<8^gD+lt\jVTf0I[3cp+_i'tMnijj04r'J-KCr\?hZY,sUE0!QX#A\N+Z(D;!ULrJ<,t3LR2i?&bOFR<%5j!pe?t@C7;g[CpKQFnQ5g2'nW2!b%MSA+.3Q,u*OqjU55YeA:WLW?*,jrki&tA"Ye+U-RX$*>1GH_H.>[%]]K^THtE7V4<WU3<-%g^[t/2g0kWjXd'C4IYpROMFOX'8T0t1r5Na;+shs:OpB5iV9#-1UkpgqenLH_!TbKruoG&]tn0fn'gp>"P^6KJ>ir0Xe@HJ0;Sg\%Lf<$gjfc%,n()<'SVLT-F'Kdu<a]mZ.nDna95"G"E(%cj+&m0JS`@Z9B$n;=0DPVnRqQh(0jhb*-@UUQ?ftHC4roOE[]K5OY'i^Q%Q@a]Vg+.?M4fD@Wfrt^!QT"C2ntS"Q%b?t;Fb)Zf-@t,3;*pJ4m=f%cJ_2g#U>XOni9oqXTY@pkKraO/`cd71\N6TNhn^)F_Ue!Z%hOc%99jmaI`V4]Ne2Yu:XGtp[_IS!)NRt<44c]C`U5^KU"NY<OhKCMl)!u/GCM3)Im\)e\IbF/ESQ)B58mA(Z#6ZhX!O2\mDK"Ee%*f2>]d*d.h&/3&oU^Bjl\LZOE0c@]p29GLQA0gWnd:TNc"$X;!k/LTOL@+[O[#m9$G^a%U2[k,GJLU\60nmrQ04W@e@D/duY]eGA%l/C`B?oJRoGV0H[g.TONNW\=3K#6Kb_h!6'ctLR-BfTiUj$!t^Wb7:$7/Q;Wq[gNi0ZgKmg1c72ER2IShB:'`gA62I-CO@;f:17Z%7V^"#-9`O^G0C8?q#f[h^WthE`Pj;>pN/BmK<q?Jj^L1MRFL>q*Pr%:*\Q4/)oU:@GuM9T@Y8L-+)Or#)"t:fc!J'(*FL-@=Pk6Q%#R#8VjXTq@5Wh_Q).Yi"8p355`mk^eGI>c1K0b8A=50Br#2LHjg*,8/j6<jT^0&/(f6:42%._5(pTfgg/g0d81)e3CRk1+_D*kMD%BleGgJT/T3nq'm2p+Zq=W-S"s:0b)'TFIt`1_7Z\O,^YuD9&"I+I6u84u&\2)*:#*gt](lB#)9PZ'3Lh0uN[nRoACN9L]*4$/q$&%<i7Vt\<t3)J$_'Z3/,Kpq50'h71`q^Q#0&b9u]t[gE_YK>KT@AW)+I(/$oe8:4hN"Z-mdSjOKQqR3Mj9g)6bSKXT4P3>h.PI5K,]%c.<Q@m(d/G`Esb9]Bs'<ONeuhnil^L0X@'AnY%:A*0D(ImCPnN*AZI'4)hXO#B%5fduWC.PBm`mj6TRk^'D30T,!%;`n=4__Lo\<%pUg\3H#5Ca"nKR4Z`"_9*LsS(;FIUGr>jT)C#01UmY$6"UqK0f:gX%%bT3&lgM,emK1HT.1r@c5F**467V9!IEGrn'IOg`8m\%MY%DdHF,0W7jdO8gZ5%ER)Y,u7e:lm;mqPXd)sGX<VX;nu/1e!_pB3F'7WKIfYFluS#NZJpneAqREF31L.UNh.S(^`N6l4s'1cc)\Rq%LF%fgm[H,Fg).`?p_4BR;+gH\iFUf.ejn"sOFdg-JEo<\'bXcbi/.*5MQ0>=8E%cY%31JA_5*T;\!+2#E78g]]/b+j)[*(l"/sl_%?8'XZ#=MnA@L50"<cJOV*D&2'Cflh'Z<RI&?>'#[8n%;uSaHoiZQ1;f_:[mTUU+<Ng=OXCRc!pa]Vr^)T3_m_lh+]i!*GAe<C*uJ%Hik*ebo$2th8."G!4#34D7Cjtgs9uq+g\Lk;.mMl:HiE.b3iF+$K7U?c0$Mujr)o[qcA+TJaa?`p/_J_Pd7MG@NCM!=(L0</2/Ho%b^m$Fan*BX(pQ3;V3lC^*0DN:[<&qdHRKOqJODh^a/'4IQcuI*KT1Ss-%;^4LU.hu6%p*;m=2cKE-"VoCkJD/'!Q<76B!JYIh'O-%f5tegB"K8thEZ,#j?br$9#/Sm&@Qc$!BH+oYlFF<O\4h)F+*fB1YQh0>fFlN,H3UdO,hiS3T?<loJtjR/EHY6X<]MYrQBbFX_H64%TYl]r6>Xgl1A8PCKC#'DLM/L4<s0,]I>^Xq1>T0(SCk-($$b'`jG*9J8+f6[NOY(YI1IZ/Rp6cgDF9q?d`*Kur<TiJ]@F:U#*k4m%5b)aE8gKC'V\u'MlZ^,YB![9!'n9UQ(F5TFdl?L2DMZLEp?,!t&C[4eQK7P?#0DYsFl[9X@8SbMU%N0Tk%$W9BJ9:F8[R<-rND6s%KJ7qZdfbb`22anPjeS8Om^5P/%XNGe,inQL.:ND'TIO$l6,#Tu![c!-PAgQmak$3qhd=JL?f*^7Y9f3KR+9?hrd64X:=%Tep>LQ$%q<\a\g)mf5>L!KqD*:Of6BdBi\<d;.Jn#+bWC3>/:EMTrQfHt*LF-lFZkEerH+=*irT#'nVp,oq"Fe67U7Du:1%5-:Qb4@?IiM_"%kZl#Er2ehhKVHV/7"3uV7ue?f@/D.NH\ZQ6Cf\G%bt^?+b/Fuc'=NL4XN?ApPGJu94Ze<]DEQZe='hq7m-C,jVt4$88o9ln^=aMI%d(r7?+HoqOi!-G+[7?W0QR)W<Tp'hL)fhK3BuY9&'_fKY1r+#'Q>8(1l#>aE*TH2$F,bA=o]'[nhbl,b*n,H_ggB/:Hra&KQhK`W%s%9Ub4?2R=.?R@#Fp#%qN(&u:*P8Xl^&;DsoR$-E",rhp9<CJl/%8agCTKYPBU@$efD>?0H?ibb@P9Bu2p]g-`JFW?U1s2oj"rIl%+WucMKM90A=eBH@+<6WH'klmeGQD62_D<cFlUSs8f+.?Ij69%FnI";c?X?^8^W`J92MZK@+(-l4g<\Zug^VCg!a8Lm&_6$2$\Xtn%i_;8!OjgM8cb*A2ihk;Cl!U!q\8UtJUGMM5V:5%hZ<b11^Y%-sp#*S0$GI+r^?!56@,rl%B/r]_('lsp@`,[B:UrhRjO(_[&!13?%<aiaF,&pBhIUi=QOdFeKCR`<*lF.`ET>*To[`]I(=8VigHN/C&WoeI;d1grAK"J]#ON(ne>0Xtu-]4:FB_2UZB[PV+2`]TOPrZ$K%TX\cC_(jI&`G8R\m',8I\S!$,DroA9X7?,d8mbr3&-!r7=@KJY'-]$#K/(8Z;;_ar8^R[HiGXo;42_,j_pb.C(ho2*G$HVmISYE]%i9mE+E]*cJmIoY=JU$D!Z]/#aNV\?Xq20W>8E4"u_R9(4!7-J_0()PQ/!:.r\L+;7%#F(2*Bu%@Ll\`3jr,$d:u%;O4$`T9ie?OF%`_N+L/N`rV\Bukb?sN'aRnCYOF=0/((2o5*'t^PtP[SqZ<c.A@f>DElA3b6m\2\U*\UnKB[:@HdY?%=+.6ej2*%12q[:Up<rN+e^%6Q^7.krP38cnG+c7BL"'FltYci.Me/$](i_A/g=mX4*W:OBEadDdNEnG`+_:oVLAgZ#R/PNP!aO(l.7d)Wtr@dIOFB1<mp:QgMqR%orELhf>2GjaS"gfNkCFF(#39-JWX^T2mrhKn3/S+[lok/iAXrrOd_c+8uUXq&pkW]bekhFK?$TU9"ASi9GWXY)stdPorELhdDE:5%jtu]Zn]"`cS?oV)''0$=Da>=FcguTNK<ncIp,(9),TgH<`YftYG_Y9\Kdn6qo]qLe]q&b9'0DHGIe1pa@e+?3W#\E/!_A*>QaQQ5%QO-sUAnOJIld.R,RgLU.Jo$Pe=>?>fC:'O5E")1Aa[hHU;T41]V4Ei4hNj<rn>ES`%5=4*V%^UcG5"J&AIg"$:ZeQhr(7&=3)1en%joiK'>p.Q0A22j6<Dj'p7'keLoY?P%7.b%!%!\pQbX`BBJ3KbiC!jh7#I.#o.AH/fLV/3Alg".D^s:d4klKYdFd68B\iIlc6bQL2%SI(^.U%ihG2blTAZ6Ye/[4erS&ZsJFbAFX8J!Oe!H8n;FHH!aY&4'+OD/!JjkX1+N3G(oG5)M0,Tk2?hK,L_S_1ZVVGXor##S?4p%F#(Ikm?2;JZt^B%QF(p/4EQHXeQH"Qo1U'uI#;F:O@0[T4@ubuWQN3JafH2UiL8TY+WG&heB`;KFdnX$8b<%j06_:XrtfX%0B2b1%+8T(6k/4!M67XpHcr1;h?<OH%q#GV3O?eR]S2EcT$\ufOYFSS<+eIugpT!W7icEn;!^,LS.hJ5Gc,NKZB<0uX9sNCu8bF8S<!\Xs%r%u5\r8_Ui"d3SE*D15f2sAVhk!&=iBt`YtW\j;"Q-g<A\/c6d@La^8dLsN\aU/Jom]DgX/"O@.0`ChT@XN$<q+o.8eRJ(W/A`>:%PRtu\RA6Q?k15C*f6^nP:F1@\VmMEkVo))PAqVFQG7&dfn(Ej1m=K+%r=j'WHet%=]ie66?+r@p8a5PEoTW6aSe!j?f-K%6JY=9p%R`t7d6UdZPDMZ=#^@`LddXd+*i$<m)dW2nc1=,#gM2Y!oGsEOu@UK/AU")]LP\'X*Au@?'Y<.VE.5@@SYjpAMbH_<e6Sjb@1-KlV%gCW.T/)2<Y:=$QgeqX-p.=s5=IjpXPREJJLPGX8/+=!@YA/dtP''h$08q/B$-O4=-Qd[]Wm"Z5*);$U64'V+b7N%Wh_Fu>oNO%uG%rj%9G+6jEdepf5hO5qHPbZ)3r3E.$r0TYK5?)4i$%c86LLs!^%QrbN9*s72GW6^c4RMG*jiW\WSg)?T]7"HU0?s1?l[U<dGcFuCm%(ME7r>PG_k#>pBn,]`T#fO^>n+Qrud2Vd[>]Y8:2ng:WR@X,<,=H*[1#8593B+YWjH%/0%OiPBik[n"M0Q4VBBVZoK'gVnkM<WW=%d$SUl1!ahjnrUt"*0@WLV^RjS-lUleR(6iphVL7+_D?RDjf5a.]MD33E<I@[2jY/1GU-%/gYT=3A-R4.S2pW><h\&0K?P*B'HLjd%PfN0Q.?1r1iM@P*\_J6B,1t[`jFNVD_Dq*KlB3X(P4iFdU-O(\?n3Vc6cZ#OASJW.@7Q^Gg458mcs"k[l8pZDAp7r][\Vqt5T`%j%34ANoV\HS`4b#fIi=g9aICO>D;QTkQ6\*2jR]KQ*!tWa!LRl(b?6[M5R%ManP8*ab0_?10_p2>l&H+n`Ro?^2J$bQfLl1H^qp!:?%D7t9;bMsfXW6LM;lq.hq8m-Ld%RJo>HOV(5,9..W*Qh],ah&T4-W7`Aj=]_@6\W,69>SnX-bFBR*'guG"5l[N=K9'Z3!08]!()Cb%Y1$7a_Zh"*Zs0p`141T/F_Tk;G1e48A[R\"aA\@k:F]CV>V)B;\Urb'I"feVC%j[mjG``pf50&^fhIKLH9iUb$iYqJU^l(H=4F=Y%)qilU`#lAh%B(ehpno,@rMX2@UCSL#r3(jh*EHsb5gdeYQV.gh83B4R_m>CDB7E5bG`0EQ"6u=7Frbafe(8:mms^m/HDX#UQ`@"B%APMP)JA;1=Vec%WG(^Od'MPg[CA<$NQ'jSALBdrr+k$/n\2gP$>cd[=JW<r;.$&_L0#\mXd<cUpI6XHj"V+VZmtlE?#%lU;S"Z)u%ff["I$GRuj`<!Xd!q?SfBd:B9Sr/<g=FnWJ.`$*/6Z,0sl58Ii-u:T4m_(jqJk="k[R50(H;@85Jh.\eq04D,F)gsCSG+tf&f!Gj%;Z4cA'phM<&F5\td7V?_6S-2\kAQB(6a6Y"?")36OLp!g`CM[^[Kpb%@b%-fYotidSu_rQ:h8h-dV]R"9%o.+6B1V@j/3n+rHLBY%.:_Co;P@r<]+csE'BMNkA/;<^.;2ctXW4C<?$E/b[9:>[!c@b^";+e%$`B26L>5FU``\sb98P"MdDL,W<a<1$LKGP!:d>uEQ78!O%%jfK(&#egoI(WI`g[Q`qZGZcARt$,7009)4^tq^oI:Fh1>Sfnk?)If$;":%%nJU`VcI_-]-:SAgH-S4fZPl`m%b;XSS8k25C9TfH%@qjgMJC6EaQ]JT_c<fch<HZZ?d<4"i1j&O#fU!"]!P*L`o>n(!,^/8&):6En[Ge<a[UTePF*N`k$]'9`e9O+90/K"u1>8Gh@IZ[i%i].WOB_#?B:Bu-%9hNO#1Y0Cc8#-3kQq"?Y!lD-G*68F\TWW,,c)17D?B93W2%9=ikOS]qc>tGP)`KscACVaTQ-[mPb-NM`G3G+'%fVH=?!61ugZ)oCpU,mbhbfaHZ4(R_PdZ-;iGUU0J>@!@3MjZ6?EuMISf$uG:g:uo+@14Y';r2l+*n*(H1I=Im=WBW>LZSK68;#FZ%ImD*hQS*p:gtd<G6DQB+b?Vi(nnBm=#$?f3o-d8X3@$e/qp0FKoEgY,@5/h=8GPmar>?TjBaqk5PI,I`(de,mZrDd9-.!?=.>W!0%p&7Yr]m:r6K\WA5*X_^OC5te0!I0fT+.BFYT*!F<eDh7INB4^&_t"Ju(G5B5CaOLX]G9cg*M#1TWh[-Ti6>#<DWdb)5k^CK[hcX(%0#Hi6'6IW)!;g8&#N16[m2T?9Wd?sXm?s=)B>OP.4T)q^&,'.tq=EOrk>m;FiT;fO*JY.3<(C#je6YEpdXm#"0ojnl%l+S/':#[D%%jM0s"EQcp]=,>[-lt'+8V*P&#Os*+Ee>+.6SmNsU$g%tg-qS%RGS]%!7mrAm;'"4o#U3-7UAa=E"E^3Hm=YA#IsLn7rF1D;iJZn%lD@F<UIVYQoUfHYZ"O[36ff0%g![^B_7$C9$Q+/4'8#^;Xm>(@%U4.P^guR1aZ_.><p@#P/N07Hi\B:c"6:<!$A])pO5WXm:'=A@%U^6G)8.&=&cD=-O$Kj0g3*bU!+4*NC*Z4:;`Q=B)1jfY[PBD<Cl<jaBo37opjEbYH3h1(c^FB"A(P]:(CM\G%M_#9EZBN3g^QuMo%<5L'sA$X7=b:UW.6`*4%cJ@p5VGOi'JHDKBf'*'8C]/cgd`jD5Cr`O3cDV9eWlX7@K659:qhG6aXcV3g/%#f(CSk5:Z9qW$TsX,(%)-fn4#LSH,c<ip9FR,E7[bJfZ3j+dq#Y%j6PNbo*^0i2/Z.p(ni]u0J7l$?cB%pfRpc@D_bpu5$Pl!Jd%ZH7\YNue=H$6WJ4J0QI%oHPjN&a,IO)=+k#4:1OLL.4`>.5S<11t`^j$1U'7Zbd+&f+R@o3(K2122V=!SZtNj^+F*;ANM(EZTP)tg>(6d+cq1t9=JDD&3RtB%`T!#G`7OZ?ND:`F,0Qnm+F_%19Z0ZI@i`3]A]Rc&cs@<!8I4LM2&e%_ogZ>3.&3`=RA?LqJ1P!4W[qLk7uI!Sl!tu\PZC;aFkV_Q%Z:N7D\a9ro0MuAL6rNWqpKNm)Q-%@OU,0S`"[f0F0IkP^5l&214FD<OJR;!lDlA8,<^A+/4oJP,hR/\S/aX+%;?dsor^O,&M#!"*%\<jd@5+TZ:g'6RXX;EuH<.t1q`MlB/;-@lL\pCf;#9ZMbmkCFp-^C?Q%`5+6ia3=)<HM?%crG,/'HrSP$7;N91fFEu5cC]&:>[Rh%]"E-_jk'dc'@*Y+0Af6-BJpj\cP^:^fTg>G_@ENE]p<h@`L-U)nrooihLM\ClchWJ_6-nLe]CN%QVAniSkP1E<tWSB5>m4o<#4ds%Orm:m-P<:NQIRTi,bK-,QU;__Of?km+?utCR^*sJ"b0D7c<BIN$gGZJ$O+<=Zr6g%;B*S4W%FR/HcSl53"BB=[#$g[a<_J4Y%9[o%+suEUYgc9L4!?5^l;V-,`I;O+aXjR:&h5nL,b//m"$R]Uka1R:cP"^kPt=_MjX!taQDnegZVK(4-(EirZ4IQFI"6uJ8O-<t-gOF4%%Z-J<o3!3feNU/5d1#aK[?aZ5IbX/S8\@jb("-Je+X]$S+j[83SUEhp8!L(@#^7P=[$4&UoOF`oqNc5RGXm\%jOCSH%"E"i+'*Ih%$khC/T!>jV9,)i<2'L!DgDd'qm@q4_Tj^onaMt8W)n[?"R,E-l*/*i-eM-)CX&';u^3rp]FpQ&TMIGBWKT^OU,[O9EUrNNW"Rd0,%1dQ%QV\0BHa4l+2,kYFQZbCs<WpF?pS82E\DHU"A>riV@9Z%2i<[]N:[a,\QqCLu>V[l+SLRrIl,?d#d=VeIRX%l!#/u+k^Jpkg.%O3VC*I#"ooW\2r.c'7qSF\,aQCar\5'_#)IV08rC\Qg7tWFct3/R[)*.:5Wr[/#fc#=S(F#\oj,BcYlAW2X^8&ranY6KckcoErm0%hFZtWI"AISR^?:28)&,1ZWouNVprrF)/1`H:p[cuO;rNL$&r34=*YYhf924d):cS&B:Fd!>aZ.b)Q26u!kEpLUl3;aS.N7LbB6qK%1dRL-#SY@!ls*Ek/f;-/>9.F%W8_1X2S^2SXb!/rRho9WD'IC+%U!L0Z2o8-P+XaZ8')i!aAD^8\*iWIRS>>3?BiTdV;OMYMV9'r%+rnPtJ6Y#U*[KJl?9q)M,M#G>RCi(tmho.1$7mrG,hKEe>)5+Qhb%Rqm(J7E`<"gZ2ZXq_Mg*AgZ4A%s<Gf>@]Pm(u$"Q:M.XXkL%ht^6Me=Q-*3s&i$GLb>^Kd+XO]Ve4(3eXLQRRq?Lc&$jkI`$$M=Ksk6[9L?!Ukg\CH\28+Gb05A?>:`cN.J,pbTrf<#DAL%^b2RX%F-Frs>@U*F'-uiW*W^@(2Zen#)P9s,7ocZ4)OT@WLmtO$*oYt8.d@b+63==Rcp;@0/@aAsXMu3JdEmMFk';UmkhORgLE'FVg+]!:%2Gl0lF>A2rJtd,m)j.1$&r'9K?`AG"$OS#=\=OFDGK!KB*OQd!9h"T_"-k)EiA%/%?tn1%Sur@@<kX;=1t\$p"88Gu!q/c@SSprg%.=*WllBn;<m"iBUg9ukhYjEDC!+SM`01T1JjP;%b"h@j_Ep=l0bi"C-[LtZJ&4S:5qQY\>.`@<(K\'44b;!I4&mgk0=9B(8"X1uk%qRDJBq7%n2]D)H&@=Y,!#j7,5#e(8U$H:fi9e@r['8GGcaDZ3LNrnEJ9<^'+]W+sm8=u/l1ArP"#H^gs:f]Z;G"U7TZ!*G<0;o&c%>R0$3[fPoZLC#e3:3tTiY*XIKFGR;>0Q4G!CH5K<Qk^cZK[GQI<.SMPq08qWLB?-a</+a%9,X%;W"$u]#kFj:<8#DOq`HF5XR/Dj%R8P50L%YQ#*ja_m!'.EEbE02(n%i*Vm<J,oIAC]>44u:SV3!OcXWmAu0Z1q8!Jttq1'7!0CFcfc",HYpFM/=G%+(%ZUD43Jc22@m%&uA-iQ_&4hH"piQ=#jPM?^IaD]#4(.>XMM85T`%kh"Q7[g24Yd#(jRWVk9[;jeGRa/DP$*@EJ\k0UTQm<ZdB5JpCgMM2)TR6G[FP%na,6t"*Lkj'8S[BhC>at(h;q?\p'mE=KPZSls(Q$JnF(i-)B-$-`9:&0:/+$/6=i>=&WBK-m<69df1eOY0n*Y:_T[Wnuc?'ZYS.7%_5@Eh9#U/M8$1iU>*>+Zg1ZOh[V)*^DEGL`4SY]1HAT)bethC?(UI1!WYc94r:>fgE`uOG^3%e&q$^Up=NOnhJOn#bl("<^ITWd"%*>1rK(_oiqHTrWo"\afpG5)@iX?DRaG^S+SXj3)rBPP[Ec12uB3i^;g0e(maTX?k>$Q.#/_pQ'3dSN*pT$,jho3<!U/$2i$#KrgH%KFIJYn.3T&QURFZCtB.JH95+NeNkJPZ3F:m5c%aQX6Lj0A<a\X@/j?N"W.L7jFM<P57%&!$DduoNPGrqDnUlT@II#*UOo\edNq\X%#Wn8jpb5Rc[B$f;kj"En.N#muEf5(HO6`8iW5(#Z/ks2,.E>hR9#^b]NLTkPn]Gf]iPp)]h1.[]>dLfL4M9dG4L^,`RB\Li#H.=n%3Zd[S/e`rUi$Kp`66Ukh)G:<&/?-jimcZ866Ah@UBM,n>$'muTU#^>Hd6^U6%XjQ]_/-Sh<GHibMCMaiU&Gq#T;dIS]U%!l9<n^5%#=Vc&eGZB91^;UOcBqDQ_8HA[`B\F^JrVhWdWOuP<N[RroOBA;n(])X)]U+Um<W/QK@@Is&t@".gNBf4GYKY\L_jZUXoiad-d^h>%-r>6-$eV#E8ZsW(o#pfV15sWm?!5<^q_/Y8n9<bm\Rn:>C6EeNTC3!&)>a\_EOK)m;IQr6<2a&6+0m16R8B0..d`NM,f%saB;`u5%jR"[q&!]61V78BJ7'e0'X]LTf>D4uYhL<+;nEAD:fu\r("(-S+g4Glh8NF^i<sJ+_c(TfT#]#R9!_0O:4$mR(6&KVmmC!&+'\pE1%(M,Zffh+LI\)>Xb;c`@E:-)ghdL8'm*b11=p5/,gg#IZT`^ImLiMS<`[:9/CP1:Qabj0QF*>:gEk,t/hlPXtI..U+l'6-;*>`4+B%;!!X(bugIk3iP0cFGB5=J6Y*57V=UuAMR>/,FOa[`%f#P5^&iHns";0,N</N)iX5WRHam[1TO7MV7'k=VqP@%K@A?@FO^f`6]P,C%]LoM:+q[AaQO;^&ho!RbYpI893?\]_ZLATBO'UDsV%0d=.gcG3662(($`fC;dl*\Wh&j[c<ff`.=[f1=4X+"mboMmo(lM.?V-WiQ%Y7f":0MinUG'4W:E";&^Z?8-gX\/%HQ3YoCD/hla@%Z:uEVft2)CQsl/-Vk,O5#+I^n!o1eOf70MYG9YXACn<HY2%W"!SFC7CI*B%6dZ$n9D*hr!%Yuj8S=4g_SsOV5T"p=E)s1%bptp5:S.`05hk!Z""`n+63."KDr+J<.jJ*0?GU:QX<9eX?1F@.?H$QhaUA3ur6p)K%N-!>H>tBB8I(P9hEE^"6,Kk3(Li6G`<=D_d;H]plrJ3o;'Tq<qP%a`-V\b*qX^jAZ8<=sc*hDJn?h4Y]_AUC#+RZg$NB]]k=m]P)%LQ>FH'5E`n>f'j2@(a6\m+*@SBYr/c!?is*FkmBAB7gWQYp(f\#SO@AcZP&-H&jUj3uEX7f"WGCk,O*R#*mP*EJ%i7iSSCYP,Vgm%64ma6[YGr@Kgg7RF1j(cjZM?0kk<&=NB`'_+<<oAL::X0m;gNsq?dJeR#u!+C"@?&[=n"XXH[$RC-\kN^%cGY\&S6$OhMre?6C4@%\EmR@'dQ_Z9rsroa@jb0Im@U!D=IIC5:JIW*PE[UQeM7I/$29WIO-_4E)2P]"Mc(fLI82Q+XPcW$u5dKo5NCU#4s;N0\WqVI!SH"%AG#:>nuN1W$/#ej(QHNH@Wfr-'Q9o-GsK5EHnh<*eXa@u@t1lOV'pWXo0a+r5VP!Tr_nIAFup&dZ8L@9Ws?2Z;m"F)iDjjH`1mU'%k>c1pE!+^B)3AE.S+UdOFp&;!G>l7,JV_L%kis^&aLTGe0?ru9?*cUfY1Y0Z:WFKjm%?a?((9FX.qh(N*N^N!eQ==__7m6BjgS$@%X[WB."[]Z;+#U;[=h?Hh._!7eJ66GsS(n0PSCR\:=^_ppQC:-CqL(V"SoujDCe)-5`3(rT$Uc>)9U?*l+s8D\0j6d#Pn<PER9?2b%(FH+hCn]qD?F.(0Nkfa7,"JHt>8K351Ro1IA!s/k.M%Bs3aT&.ijH;ZoYMO@)qmL[6K,iI&J[]*?XhGNfG=8jjqEUK].D)*=fpLc%T'_Og4A7bn7SSU<L!$]9NgFqLY_#OL#!bLKe8ncYa.[*4#af_X6^ap2VB\:;mH4Qqd%o$2!LLe)C8B/D>q8AtH-:I]4>p=`3"Kr\%/h;;\ZsC%65tO)&!e%#+GO'eTd1/?uCK$#V/u7QRm3P.'H22;eBWgaVlaU%<+*#&ik]kSumL\]4YHaP`ei@JA,B$/lKIptD>QZsY%>#r#;]=R`t+Sr21\3Z'LW"p/nG0/tna(/7nA4L6I02Q3sA[?8si$;91p4>tD1T5i"+Hcq\TAQY#Co8Jq(8u&p"e;?N4EVaZXV22)%W0Kc*#?'fFfaJ1?(ss2XnDhtgmZ:.2=fo);R_FH7O6ulbCUb`2Ojc!;>1<=Qs/[=W:3>ft[BXEH,:.800p?3nWFF##=EEmY5a1SU%mIRJfJ_4*H/*+*@-05\d5e`,\SW3;r6`*C@0<NFC:ZIhA9HmAlc<Fpj**]?^A;QHMZ031$Yu]RiO6e2HIa^l@N$f[V/o\u6,+b"V%-A@K%<dIt.D?g@5qDeZ9@knq`(lL:.5-Q8&M\;sA:p4j+"'Pp_=02Qc`&R.uq*JG[,7ONKo^9)9FcP8W,ZChlDg:Z.eIAJ&PgZ^X%`loV(S,TCPnaOatG!1P7lLTk8]m(7sO3O9*h,Np!m9[aE,Hu5o@EOk$=@$,laqY:B]OM\1G=g`(?Ep,mlFf9VH]P'U/]ZV1.t2d4%Sl6mHUsnpCEoiM2$GqcI+f#g^)d\^5L8Wk2Pb:E3'IRD[]ZV%_%)jbR\*eSR$C<O?4Sj6]o]GWc^FrV\Z`BE"X`+s1/ND3&]-:7>%DC4sPQBF_<7#<HF1bab8D<<:sQ<U;BUet-s4M<r*E3M08$<e9A`:iH(-[%Qj7_]um\r<egL&dn[N)hDu/5g]G6L?$QIZ;j\'JW6R%EIi%6EO+\11&eQQ?OsL_[CY?]SMBJBr&q:'_THle5Y%0).4`^h>#ZcJ4GN7QZWc(Ua5sF5FgaCoj(*B[k)&^.ie\3`UBGJ3`#0Ea%e#MSC;iYL,BA?3b7g3,W**GR:]^;lWL<OBqAG;p#%$?\t5'EZFMb[tP[;K5KYc4b:G)*([?a0Mk-7u1IA`h6M9:b]Cb_Ig\P2M4%%g@\+s)mg-LHC1c)d(m$MJ2eWu=HXE91pTMH!TE&lQdt`RmL`:lB0pG$9!Ad;."hK"T=Sp1^/R5#63pIpXt;Y!'OQ?`i<M9G*gJg/%8AFPslI)nZ?C[cM4(D!#54>L(3j8iXTX;p3N]h<lhS34fZJ6ZBQn]sIGr$*@c;[[EL<i4"CbE08%](<.X"L5sgX:u>9'I'P634I[%H!7_C>Z+d(,2.h"CN2r5MBN/RV=bJ_A@&7Yl(EL,dMu0@a^;^Ll^&S("Xn7%pJdpcZS"F4\j.c_ck1j76bR&9Hfr2j_+,3$dI(BR%Bu00?KqLt.ftLo`bE"Y!gk#0V6b8pn>t_Dr)[+2XMM<-uoOhku2Fj-4en6P\WI=',RL.bO2'oWjD-"D[NB+EB(G%OM+)_mjEkD&K%Hk(m_'o+QCR50VI]G5TaBmGG27Zu(I[[oY->L?49;YN_U.LR\iQ)mqiB`3oF[Qe!U5I;8&07"j[5KP,$l8[u\fkiQ2`1/0WU3\`?%cRf^H.^'s04BuP0.&oucTYF*0HAcY]d"eX?0))-k($2k1'jJ8"`5o:NnqW)L6@hG!l!Q5Ya?#Fn6R`=(Y_S`ZC"[Qag=pMYXQj1Y%_(JeR^22!;d\'Kl6rBVsr\nNB'cZe[$:5.ac5>+ee2tQLGJ;BZjF3m3UcWLteWOAdZ9aaP=f4#p2J)4b9_Y-jE-et2e)nf5e7[OC%3$`[L<jpAY#MK@0g3p-F0Lbh,]=%"deY4cX@[Gp!N;/JEZ-Gm2T4Khnm';]JJXmQ$rcnE'"EsFogAOp88P>GX[M'&?.:u5]gulbk%&H@!;d%li-`:9!ibj2Neh,ZG_Q66Ne=Lm`87YIT_q1'qR(TNLur6%uG3@.q/];UL%%,Gm.$\WK[ClsMT:3N3RbIF]@LG^/`+NrmF%SS9g__kGbR4bI$tLt_7h2WXV//))RcmlIE5+I'ICd-*@-L@AfYRe*Q@Q'$t:V7+kpL4[(MC2ts`.fqWa_,mJf'g^UR-"'rt:ePJ!%p2r(^N#bbm:sWd2R*ft1;XQmo!p\Y_m)Dn#HWNpANN"(!bGqY]K%:)]48<F#a34*CMo*BI=.o5kq%!5YY8d%JfIe.1PoN"D7R!I.%e9-F9]:@)ISQs(?aN\UAo_V9)::5AhNY6TUL8"U$/GH^UFtBYP96]pZ:ipn-e:n"8>Tls/YY^;OY#8H?2NHSI8FJ-#a+8XQl.4QB%#u*@]K(X\#Z^8fgf/r97CW-Qj24%YB",jhOpi/fB="+gVMolMuXh%JYd'SY`NnKT4m:K(efdJk.W]^&lFm-AkNHSTgFc`LNAD1%K%D<6I?P=K]gF;;\j?)Krs.ooiC2o&a?LXjCsP]orm6\RF>RCt(mn?Aei=@ti]<P(+Ti1clfaL\K+1-\#Q#7':NE9c<+-`03>lkb)?%/c2%Z"XY>Dfelmtm*?!']&hCU(B+Ej9q1s'.%GKR\Kn\U=,?sN,jb*_"+(=NQBl$cV"E+%HLRsC/Ij1>_R53LG1^'BR-dnC$<GgG%%s5JBW)(aWm'^[C_c&O5Thq?ECu$jTdU(59/k%h4<.HEq]$bU=\6/(6YuFc3^grnmm@Bk$Es_!9Cd/Y0>GmF%m),m%3'<7fFe.o$%r3H#3me1&!Y3;A6-i]E%b^)Ce<+Ho&pqkjYDMo^Oh?jRsLI_tnd/dV$aapE&A34=flb'5!=10&9?cM&R\b+@]3`Hhj/`r/^&B?aN%dtnps/]s,Tm1+QCqLg1fBrCHg8HP6NZTq*E/)YSQI0Ysb$^rBBW2(StD6;/TWO\8\7a6_I1I]J`Kl%KL8Q8@s"Y\n(p1ElQEEc.S%03"!:=`6RVi3BXlC"MJ?#2QUPS$R;i)Uq'Qfq"1rG4urM44:C6*]\>2<c^npLgX+b3J5!iIH(Y`;ItT!K"!n=.;=I-b_N+u%Am\?%4#-&]RMRq+PnR2[E,pE?'oWPknU;"HAB=#:7D(mVi+!C>#NN1Yb"s=W<M<,Eej&"@L5HJSRhokkaT_(-6FUgUa%bYkS+]GuL?=LL%TgErf.26`mMLLWdeg2O9gP6,AL$u5D*Q>JO\C\ddn7<=P3drkFmUfnaQ=Tc<J7k3l>2o$4W1OeC1qY37IR$HP65Q\uZd2glCHtpS%M?015Y#%5i&BrU,Vc+^56+Ch4Yd`on%/A89&!JK9"8[8cqD"gPh^A"!#U1?;FNrk#Y2M.:mCLa*g5At*g?8sj!I^4'M:le-RLD^d%'8g(lJ2#o!<LiB/+e_Pb'jmZ%-Qd7A%)6-6begEbTM^9mDl92Pd_U1obW]-/JdFI$!c8_(W`][]cH,=lp'"HG;6?XI_E7""lJQD#%@A*G-,,?eC&udsZ6RbT&i_)fKTXL>\D4$9YTm&@*/(D-I9/[_uZ+0jnUmD+-(clZ3ZtkTbC;plC8HM`m3\2QV.RL'YM#>^(]L"o5%m(n>%giK%om5]C_Cc+i)NK>u<0M0cG4FL_VA\5oNXe6]sj:b]Tn'hLtO1HkeLi?j2IC%_=b2u_K%A2@*%lkX7=Q\@4^,B8"T[c`N%a1UJTY2YbBHmI["dAb5jRESOscspCBG!hdF^#PWK2+@iCnWpb"V&e[6Qf.bNpf2n!N,n]dJr<!l6ZP7Y9d8t12N'"3(6!R$gD1<4%0d_k=<VjdfI$>hfUD5f'?Lum"-Gcf82EIKAQ%D!'Qt<VIKlQ\".Q$Ah'b%APMQc`]O);HpPPOQGL(1A"6r7_dC*D;iUoRIg>b_s#%,"Po]L5?PP8#3IV<."*m<j48^kdDUn-jNB;QNslH+mt0SmGR6A0\";u\hq:;WC]:HO&XQNAu+g2$9mpSXK30=%b%RJ?LXa#<go$0%*lj>L_$<A/lFQn&>Ni-j&e;$bLLo($R-VZ$o$Dn.h)j>!8R:2[k,_i(cl$K,O1,1NacXPYa..W1$QkGRWXJ]*Ba\IOa=I5b!$UhV%#.]VA2C"j9`,1Q^Xl2PF5mik;1LKOI]Ze(=T5qSIf!pEo#oC7\I6BW5RKDAL1'>ab!iX6X\QpTJUgct+a;"D<`3X8=Uk?a9@3(&n%^+8NV,L/ticM]At#)Pe8B_5gc[(/fEa'/]^-bZ;cd%5&rS\F3I)ID%>)c1n/AIcD3Crc7M4Ep%XOjRC+AQ8]3@+83[=tZ)kUK/'s%KaVdQQr@u'(0k9qR56fgaQ,$>YI0;IOcZr4?U/&;CFVle-#,*;hF]:",,ud,5/_i^=Pt"q0HejkB0Tj>a*^nP'+Z6>7YS3=aDNZh%iZQ\RSO9OdB]I5g^K@G4oCQG>@f4Y[f@bfNZGW-'.NXUPl`GK@M<s'I?EhDLrM@i8]Q&b(]%"aI:l;n+U5R)=3ZcOlV[ZYXMj'j[%Lnk8F-9'j(57Q.C30_&IY49sqV>5/WU)D<JRA6TaT9';Y!<fS5`H1Ot0l_t0BUSB6?2MmhnC0BVnOb98SI_Vt[Ek!O1-eeTZs]\W%DM8?GaRZ<<(ojNC-j/C_;X9,OQ$Lt)-_iXHP3iNhWP/q)YG0eU@U3tcHNdmo;s?mDNq4:*^?]/1%Yh%Zb#jEEVZs2*g9D@e9&Z7O%Y::/Qnr9]oP=d74EL!Ao',4/'#qRM*1'W2"R.*(-8p_;@6DiLhs+D\:?2JY^BT;<Vqi4cO6or2[;&Amj.;M/Ycp1.ff]-TblRRAj%G`F^$jP5=UTtA<9C"@"'5V(5)<&h<RR_KlK']Z$sO).>!2l7L=%@ab6k#58DY\8GUKsGK23b<P.%?#bO,Wtiq;I\T@bt9#s!rB+0%'QlcX+'1G%?dl_?<YJOgJoP05XT?tRbA>3ZkgFNo]o<Ai?#6?frCP)KOi]ciq7depcUli6&rlr8k,rXu=i"Fu%M%`D8tD`DN@PR1%Mqb8Q"[qM]QKmJZWN8S;()L#dlTHa:[\[l-,hujO@-&Wo7Q>/^?2+jUMg@dZ[$S4oG'e\LL&0B>#Iq>P3[)Cm'^bDncer]K9cf)E%kuCX':,&`F0Ubg4WuGFa=6'JMA.U)pLHEU56lfP"dRh\e$96,S:E!Kmg!0Ye+7>r>dVa8;o2KSQ=g]mm@9A:UUHdX#7=l@k2r8je%<M\T,po'M_G=oJ&DMSn,n)')"^'(nCU.m5+U-K(K]JR^l0F<j?T;XisII>e[-qZ$)kT"$1$D(!$/WY-Gp$MleZ\uR]?A60<&O2r@%ZLLBsU?C4`.XMoo6Z4.8QdH/*)[MUQ[[@9l!g-Hgm+tMOluMf5iCY\o@h_B[gZa1_>6MktiLOZ8bBA-moPLFQFOThg]!qPW;fpTE%]I`ZB+AuD<c&d@>!_e4n;gSj>&:_#0?,4hX!g9.6e,`RQRZ%E.#4G768[UU;XAkMp9_3\i6`ZtKVrdSejtO(7PCm%N"B-"/5.(Hs%h)c!%Z!M".ok6Q(#jT9E#sf#74-a_F^j.fDJub<u0Zk(F#YCVgB.F4ARE$a=`Q-#>`(%;K3^V>IH.@7V9=^RrEUKjYg"2*,l48^8%:!hAD94(WCWRn?3i5gp^TO)K#2._;DegRqQ8("55oBJJsq7a3=hKh$/fg>=M.*+a;d837&<CIo@U5SMH*S[>p+%N)&EJ7GKP<B%Y%]\QP&goIgQW7L^f^jdDA^$+\=q`O]hGTKfMW@MjJ<cYfBRH3pgZ^eO-AY8\A?bC=W&pK<*6aP>RH*m<CnjD*'V9o!`UL_3SY&gj'%%Z-a6;'jWmk>caLRm+V&*$#[-+OQa86(LTO!H7K[a7B?i,9W<&osB8F'[h$').GsE(+j<g6JFc3/&V'UHMOICYMp`J%$20(>sjBd%h*4PreM5jaCRhE9.cmis$6H'R`@*G2P)RA]]Q:.`,lhAp\c<h(s&p7!/o8#[=e+a3,n^Ou.#h,b/<e]C?GDhZc(Q2p)`(^CE"^to%f#D9)#WqoGWt*#c)+-%(TSgDJAq@k@?CbWZY#/>RD.nrE;rPh$Z;Cc9ctT\]=MV2^j'PXARTTfOHJt3T;&N@N?M`b<b.MO19VoPa%P1'-Ug)fe1D[\e.TND^7"p]dr,msGRat3L'15m6LonqhbeQR)QgC?Q$nY=^%;LmH`7oaEa&eH/K]f%-K6ZGF<[o#=?NA>>"6`Fd4%=;Tu7\Vc1"jRR-`cobH9AUG$21&94+h!0l;-2PL4S,C.*'6M9qQ^krfbL44"mF*(+k_X?Kf@Qf'Ie=5$rL6%Mjkp+;j"J1Iiu`aI%Vgj-p[gi0k?`4toY.o;_li6c6J,9*cIeWj-^\OAVI!kjYcbKA;?[bYs^O#ou>JksBraX(GcYrRTYQ*ndn,M#1-c1gO0R^YqieY/8%e(_)+a1ls#Dr/S)3':$UgA$'M?21Q)^#AngRt#1Fl0m>UqVT%jhZ&A?aZ@*7nhr-<+]r2<6j6R!m.1ZTZ:.BsM>gK$7I5^d4+=22%p`?P=q":8)Un@YKm8q'ug\i5n_]SmJVr.L>c[Yf]_gh]UT7?V456ts646qBFB[2>#MpBl?Deo7=VuPfEf0B6(GCP#?h1,8!5Q9H@%qU6P#rt9h[p]'c]s89A+rr(`gX8P9TpAaRZf>%.9H2<<iMtYKY@nc@+Bmo^Ls3gn>s&8CbVp]ql[iWhEs8.:_J,/Qf+9&GJrQG*3%rZC%t\,Ul&s$qP9GAm3s\p2CN[e`Z_KaB&j\cm_@9[m:0Y&3Y[Ri']L8N5tC9oB2;9>pgQ+4u#n0KUTqqrCCW"\nL3mCO*o8Df$[%M:W]SUfGLIJZQ>9Wrnhic7a<DTNnDJMd1a8O$hH^%r8&O#<BK7grc4#%:")PpE>&/-AVV'E%Km!F%YYYc"OZ8"X3M\7+$7a.!EQ?%0UUJ"$^=>SCC4CAfVugb2C766_Aj2R=B0#<H\o$e&0$'L8/XKTLseL[8,KP2b+>*QcD#!q*n;dD]@Rg%FHWtX$:Y;dT\KA(:r4jm%MbI[;APljm@Z'p"g,h@`V1>%rd%f2mG"Vm/bAoRTlW-L:*-]pS(QrNDC?Eub$P@%*42=aa>Xe&rM17gV_Q;U3'kN^CUpp-[MB@&u%>W+7@Bfbm,"^6]?(=hJG]P"MMN6G+XaucV_0,LKi<:m%0E:b]k)/f4:8!%98)dF/WrAsAC1W7sqB>kWV<uLM"Op80I?E"9hFA^n)%3Z'qN%9Y(#X2B2&7kJKR3enb8$EC^Al7=K#&X9ULh1tB^SK;QT4dIU!,7PqlO1/sspEm*RM&mJ)VT9:EMs8Jsp.0a-H#>D0?SWkO%*D=X[1-3T'LSp[9p,7_AU%9IFoLi9P9I5XZb64L\,!E)^/60CfGM"Le31@TL9o;LnYEFt2FqXm+KWP;<I!FkBG54E.jSSid\aXRO%0Ck"&8KlbeS]uuXYBl4G1IV=k]_.Y`=N6d3*Ot7_g&8KNi?&?EIU*@\D4G6T!i6"d=kp1WX<6AbU=VFr\&nokAS9h/h)Yo!;KG7l%>^8etVhI[@prs24s/AQ"`sjbBCR*g.ggo/NkJ5DOgAdfcTGZ=]<3UH(!Elc-=Rb\6^0O\a:uC0"jdT#1W4t/!k4")`Hc&)7(L@oD%2Z._Kot'f7Zfs+"9oAspX+GRj1Fq&V:KBn?5dnt;6.BdLnWS^1G1A(^8i"df'\3+9!gLhpSPdUo0VpNrKD7KG=!oXLQj543lfjYd%(6c100J5).+t[i3(r9f^s%E_3/Z1,P>=uZ#iJKWH^)Z!()Ktit\0qKHIna>YD)/&\bbslM7Oj;5b38/j?0>Ht0%A%-'-T6jSJi!d%lCH=,'>5@l>^$?tRCi)26sM`GJL<V:RO$8V/g\/:?-`Shk:TNC/G3"/s/QgpKLQYZDMZQjWV-lRn+m_1(]ITKX=mK3;gQ]"@^OWt%,(oKYV304fm'9!S4aNTcVq:n26oo.qU=/#q#RrkJWB^H=aCKoi"OVO9LS^;L;JMN<'69EkE^F9PC=q<!PhMQ<9V[?F/h`W@dtWl?%8q1ZQjPcP@SUHU:HPML[-As(4Nn`4E1Z>RQJrT&r8X7WOP0&/YDTdT.MS1^;Pi8a1,3XlH[ESL;QY@TrjFYO2#?[BHD2IM_Spe=\%VFA)mQnJgN<$IAckK?3'M&@dQ^2P%7?0?UOOp]=D11(f[_5Ke%k0(W:an_CsARY>\(13pHp31&RNp-T\PBooh705^m4(Z"1/Z`_:%O6NsCIV)T^0jiXc&=:iDS1c\(+_LG/q8-*j?g"(ib<EB#3FV(!qXHRQ4S?=\@#RP\`%(1Yk0&_+ShlGJI$n!BeJ?N!0N=o/cf][i%#=nBYb'X6]WOGP<p0,\bkCc])K[Xn\1La7Nm?ocm%dD4#N5<pN,&-M:ANGRWGFpYCQaR@hPZc@[Q;n]!AjHr"/,GVg$UbX9S!>G?%)'lr3Qnf%L]?fdtB>0cQbaDb/J)25F#&o1k3G-Jfqq0o10k&-HfP^!pNqoE,3*)4-dm][gbI*VgZ7f.T-C)]YlX.?c`*?0^g7biA%s2lgp@!Rm).Q_P@6Y*2\;h3SI?nN*]"XbkUS+D:YZ$)8C9G;.]gkUpUI?osS265;"R3^u_b8qR#6ri^dBhS1T^k)@gAXtPA&-d'=%b`ripAg&)G`u\gcA9jO+Z0B''[A2'.9u_^J7Jc)<?s@u]kN!a1p0&_"dJI0;geJ6B`7,q.f6(EBbY[gpH#rQ8'VXsE<m;"UM7-E^%"i]+H/)6()J^Gm.Z7uAND*!_fI`r*R4cW0<0q&_#59F+_6WEdCRNL"0r9@eC6hK%sBoHQPT&(j42hR^45e?604Jr7PlU/t64r"Qm%?X;eL'c^&sUZ>AsV)>P%@O<'-R&FWJiIpXp0bF\X8kUugK)GDa?G@mG,.ce+Qj<u5c)S'--3@";dlnABMVs@SAKh\pSL"n.-GmS*%peZ[l4q[:jqcluF!pT0^`Q([)-2=@-ZMr[(Fi-7)B#:\pC>SGC'/Z'MCG(7!Pg9p%*A_,*l)=J31L\m!Y>g]L'3+?fkHQcUO?D1H%V0;^<>@#dZ,"+?8fD1d?D2(O(.j#6rj4tHH2%sX\De>]'R6[Q@1,bt!N_U?,_]C+ZooQ"LB#78rRVmE<D&aS$)#(!po(@I6qdV7?%mO[mfS.!A"FhPj[(VUB*#BYIe:N&nlq"N\Dl2N]Fa$5(>G5Tnjo\8:%r4i0o\%hrmIf@gNn,E7>J,]9B[t"/TLT-pGWVt$;n,DtN%TE"K&5Q1NZkPt.7rrUVtd[U:%=9%5DrHE2['p`.+C]~>%AI9_PrivateDataEnd